[
    {
        "id": 1,
        "title": "ロボットの動作シミュレーション",
        "description": [
            "あなたは、ロボットのプログラミングをしています。",
            "ロボットは N 秒間動き、ロボットを起動してから a_j (j = 1, 2, ... M) の倍数秒経過する度に、それぞれに設定された動作 b_j を行います。",
            "　",
            "ある時間に複数の動作が起こるとき、ロボットは動作が登録された順に、登録された動作を全て行います。",
            "　",
            "ロボットを動作させたときのシミュレーションを行ってください。",
            "　",
            "シミュレーション結果は、以下の書式に従って出力してください。",
            "　",
            "・シミュレーション結果は N 行からなる。",
            "・各 i (i = 1, 2, ..., N) 行目は、以下の通り。",
            "  ・ i 行目には、i 秒経過時のロボットの動作を出力する。",
            "  ・ i 秒目にロボットが動作するとき、i 行目には、登録された動作名を動作する順に半角スペース区切りで出力する。",
            "  ・ i 秒目にロボットが動作しないとき、i 行目には、i を出力する。",
            "　",
            "たとえば、入力例 1 に対する出力は以下のようになります。",
            "　",
            "・1 行目には、1 は 2 の倍数でも 3 の倍数でもないので、\"1\" と出力する。",
            "・2 行目には、2 は 2 の倍数であるが 3 の倍数ではないので、\"foo\" と出力する。",
            "・3 行目には、3 は 2 の倍数ではないが 3 の倍数であるので、\"bar\" と出力する。",
            "・4 行目には、4 は 2 の倍数であるが 3 の倍数ではないので、\"foo\" と出力する。",
            "・5 行目には、5 は 2 の倍数でも 3 の倍数でもないので、\"5\" を出力する。",
            "・6 行目には、6 は 2 の倍数であり 3 の倍数でもあるので、\"foo bar\" と出力する。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M",
            "a_1 b_1",
            "a_2 b_2",
            "...",
            "a_M b_M",
            "</code>",
            "・1 行目には、ロボットが作動する時間を表す整数 N、ロボットの動作の規則の数を表す整数 M がこの順に空白区切りで与えられます。",
            "・続く M 行のうちの j 行目 (1 ≦ j ≦ M) には、j 番目のロボットの動作の規則を表す整数 a_j および動作名を表す文字列 b_j が半角スペース区切りで与えられます。",
            "・入力は合計で M + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "ロボットの動きのシミュレーション結果を以下の形式で出力してください。",
            "<code>",
            "c_1",
            "c_2",
            "...",
            "c_N",
            "</code>",
            "・期待する出力は N 行からなります。",
            "・i 行目には、上記の規則に従い c_i を出力してください。",
            "・末尾に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "6 2\n2 foo\n3 bar",
                "output": "1\nfoo\nbar\nfoo\n5\nfoo bar",
                "isPublic": true
            },
            {
                "input": "12 5\n4 p\n2 a\n3 i\n4 z\n6 a",
                "output": "1\na\ni\np a z\n5\na i a\n7\np a z\ni\na\n11\np a i z a",
                "isPublic": true
            }
        ]
    },
    {
        "id": 2,
        "title": "嫌いな数字",
        "description": [
            "あなたは運悪く病気にかかってしまい入院しなくてはいけなくなりました。しかし、嫌いな数字があり、その数字が含まれる部屋番号の病室に入ると治療がうまく行かないのでは無いかと不安になってしまいます…。",
            "　",
            "そこで、部屋番号のどの桁にも嫌いな数字が含まれていない病室をリストアップして入院先に伝えることにしました。",
            "　",
            "・1行目に嫌いな数字 n (0から9までの1桁の数字)",
            "・2行目に病室の総数 m",
            "・3行目以降に各病室の部屋番号を表す整数 r_i (1 <= i <= m)",
            "　",
            "が改行区切りで与えられるので、希望する病室の部屋番号をすべて改行区切りで出力して下さい。",
            "　",
            "もし、希望する病室が1つもない場合は\"none\" と出力して下さい。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "n #嫌いな数字",
            "m #病室の総数",
            "r_1 #1個目の部屋番号",
            "r_2 #2個目の部屋番号",
            "...",
            "r_m #m個目の部屋番号",
            "</code>"
        ],
        "outputDescription": [
            "希望する病室をそれぞれ1行に、入力された順番を崩すことなくすべて出力してください。",
            "　",
            "もし希望する部屋が1つもなければ`\"none\" と出力してください。",
            "　",
            "最後は改行し、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "4\n5\n101\n204\n301\n401\n501",
                "output": "101\n301\n501",
                "isPublic": true
            },
            {
                "input": "9\n3\n409\n509\n109",
                "output": "none",
                "isPublic": true
            },
            {
                "input": "1\n6\n101\n102\n205\n224\n231\n314",
                "output": "205\n224",
                "isPublic": true
            }
        ]
    },
    {
        "id": 3,
        "title": "ポイントカードの計算",
        "description": [
            "今は月末。そろそろ今月の家計簿をつけないといけません。 あなたの手元には、とあるスーパーマーケットのレシートの山があります。",
            "　",
            "スーパーマーケットにはポイントカードが導入されていて、買い物をするたびに購入金額に応じたポイントがたまります。 加算されるポイントは次の 3 つのルールに従って決定されます。",
            "　",
            "1. 通常は購入金額の 1 ％（小数点以下切り捨て）とする",
            "2. ただし、3 のつく日は購入金額の 3 ％（小数点以下切り捨て）とする",
            "3. ただし、5 のつく日は購入金額の 5 ％（小数点以下切り捨て）とする",
            "　",
            "あなたはポイントカードに、今、何ポイントたまっているのかが気になりました。 レシートの数が多いので、手で計算するのは大変です。",
            "　",
            "早速、これを計算するプログラムを書きましょう。 ただし、今月のはじめには全くポイントがたまっておらず（0 ポイント）、また、今月中ポイントは消費されなかったものとします。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N　　　　#各レシートの数",
            "d_1 p_1　#1枚目のレシートの日付 d_1 日, 購入金額 p_1 円",
            "d_2 p_2　#2枚目のレシートの日付 d_2 日, 購入金額 p_2 円",
            "...",
            "d_N p_N　#N枚目のレシートの日付 d_N 日, 購入金額 p_N 円",
            "</code>",
            "1行目には今月分のレシートの枚数を表す整数 N が入力されます。続く N 行には各レシートの情報が入力されます。",
            "すなわち、d_i p_i は i 枚目のレシートが発行された日付が d_i 日であり、このときの購入金額が p_i 円であることを表します。"
        ],
        "outputDescription": [
            "今月末にポイントカードにたまっているポイントの値を１行に出力してください。",
            "　",
            "最後は改行し、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n1 1024\n11 2048\n21 4196",
                "output": "71",
                "isPublic": true
            },
            {
                "input": "1\n30 340",
                "output": "10",
                "isPublic": true
            },
            {
                "input": "2\n5 10000\n12 10000",
                "output": "600",
                "isPublic": true
            }
        ]
    },
    {
        "id": 4,
        "title": "ハイアンドロー・カードゲーム",
        "description": [
            "paizaカードゲームは、複数枚の子カードそれぞれが、1枚の親カードとの強弱関係で勝負するゲームです。",
            "　",
            "どのカードにも2つの番号が書かれています。",
            "1つ目の番号は1から10の整数、2つ目の番号は1から4の整数で表されます。",
            "また、2つの番号の各組み合わせは1枚だけカードの束に含まれています。(同じカードが2枚以上存在しません)",
            "　",
            "2枚のカードの強弱関係は、次のルールによって決まります。",
            "・1つ目の番号が大きいカードのほうが強い",
            "・1つ目の番号が同じ場合、2つ目の番号が小さいカードのほうが強い",
            "　",
            "親カードと子カードの情報が与えられるので、それらの強弱関係を調べるプログラムを作成してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "a b",
            "n",
            "A_1 B_1",
            "...",
            "A_n B_n",
            "</code>",
            "1行目では親カードの情報が与えられます。親カードの1つ目の番号は a、2つ目の番号は b で表されます。",
            "2行目では整数 n が与えられます。",
            "3行目から n 行の入力が続き、各行では、子カード i (1 ≦ i ≦ n)の情報が与えられます。",
            "子カード i の1つ目の番号は A_i、2つ目の番号は B_i で表されます。"
        ],
        "outputDescription": [
            "出力の i 行目では、親カードと子カード i の強弱関係を調べたときに",
            "親カードの方が強いならば \"High\"、そうでなければ \"Low\" と出力してください。",
            "各行では、\"High\" または \"Low\" 以外の余分な文字、空白を含んではいけません。",
            "　",
            "最後は改行し、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 1\n2\n7 2\n1 4",
                "output": "Low\nHigh",
                "isPublic": true
            },
            {
                "input": "1\n30 340",
                "output": "10",
                "isPublic": true
            },
            {
                "input": "7 3\n4\n7 1\n7 4\n5 3\n10 1",
                "output": "600\nLow\nHigh\nHigh\nLow",
                "isPublic": true
            }
        ]
    },
    {
        "id": 5,
        "title": "完全数とほぼ完全数",
        "description": [
            "N を 2 以上の整数とし、N の約数のうち N 自身を除いたものの和を S とします。 このとき",
            "　",
            "・N = S となるような N を完全数",
            "・|N-S| = 1 となるような N をほぼ完全数",
            "　",
            "と言うことにしましょう。ここで、|N-S| は N-S の絶対値を意味します。",
            "　",
            "たとえば、N = 28 のとき、28 の約数は 1, 2, 4, 7, 14, 28 なので、S = 1+2+4+7+14 = 28 となります。従って、28 は完全数です。",
            "また、N = 16 のときには S = 1+2+4+8 = 15 となるので、16 はほぼ完全数です。",
            "　",
            "入力された整数が完全数かほぼ完全数かそのいずれでもないかを判定するプログラムを作成してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "Q",
            "N_1",
            "...",
            "N_Q",
            "</code>",
            "1行目には判定したい整数の個数 Q が入力されます。続く Q 行には整数 N_1, ..., N_Q が入力されます。"
        ],
        "outputDescription": [
            "各 N_i に対して",
            "　",
            "・N_i が完全数であれば \"perfect\"",
            "・N_i がほぼ完全数であれば \"nearly\"",
            "・どちらでもなければ \"neither\"",
            "　",
            "と 1 行に出力してください。",
            "　",
            "最後は改行し、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n28\n16\n777",
                "output": "perfect\nnearly\nneither",
                "isPublic": true
            },
            {
                "input": "4\n3\n4\n5\n6",
                "output": "neither\nnearly\nneither\nperfect",
                "isPublic": true
            }
        ]
    },
    {
        "id": 6,
        "title": "完全数とほぼ完全数",
        "description": [
            "N を 2 以上の整数とし、N の約数のうち N 自身を除いたものの和を S とします。 このとき",
            "　",
            "・N = S となるような N を完全数",
            "・|N-S| = 1 となるような N をほぼ完全数",
            "　",
            "と言うことにしましょう。ここで、|N-S| は N-S の絶対値を意味します。",
            "　",
            "たとえば、N = 28 のとき、28 の約数は 1, 2, 4, 7, 14, 28 なので、S = 1+2+4+7+14 = 28 となります。従って、28 は完全数です。",
            "また、N = 16 のときには S = 1+2+4+8 = 15 となるので、16 はほぼ完全数です。",
            "　",
            "入力された整数が完全数かほぼ完全数かそのいずれでもないかを判定するプログラムを作成してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "Q",
            "N_1",
            "...",
            "N_Q",
            "</code>",
            "1行目には判定したい整数の個数 Q が入力されます。続く Q 行には整数 N_1, ..., N_Q が入力されます。"
        ],
        "outputDescription": [
            "各 N_i に対して",
            "　",
            "・N_i が完全数であれば \"perfect\"",
            "・N_i がほぼ完全数であれば \"nearly\"",
            "・どちらでもなければ \"neither\"",
            "　",
            "と 1 行に出力してください。",
            "　",
            "最後は改行し、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n28\n16\n777",
                "output": "perfect\nnearly\nneither",
                "isPublic": true
            },
            {
                "input": "4\n3\n4\n5\n6",
                "output": "neither\nnearly\nneither\nperfect",
                "isPublic": true
            }
        ]
    },
    {
        "id": 7,
        "title": "カード並べ",
        "description": [
            "フライト中に退屈してしまったあなたは、持っているトランプを使用した簡単な遊びを考えました。",
            "　",
            "この遊びでは 1 から 9 までの数字のカードのみを 4 枚使用します。",
            "ただし、この 4 枚の中で同じ数値のカードが重複する事もあります。",
            "ルールは以下の通りです。",
            "　",
            "4 枚のカードを横に並べます。",
            "左から 2 枚のカード、右から 2 枚のカードをそれぞれ 2 ケタの整数とみなし、和を計算します。",
            "あらゆる並べ方を試し、和の最大値（最大スコア）を求めます。",
            "　",
            "カード 4 枚に書かれた数が与えられるので、最大スコアを出力してください。",
            "入力例 1 の 2, 9, 3, 8 の 4 枚を使う場合、以下の 12 通りの和の最大値 175 が最大スコアとなります。",
            "　",
            "カードの 4 枚の並べ方は 4! = 24 通り存在しますが、足し算は順序に依存しないため、12 通りのみ考慮すればよいことに注意してください。",
            "たとえば、9, 2, 3, 8 の順で並べた場合のスコアは 92 + 38 = 130 となります。",
            "　",
            "・92 + 38 = 130",
            "・92 + 83 = 175",
            "・93 + 28 = 121",
            "・93 + 82 = 175",
            "・98 + 23 = 121",
            "・98 + 32 = 130",
            "・39 + 28 = 67",
            "・38 + 29 = 67",
            "・82 + 39 = 121",
            "・89 + 23 = 112",
            "・89 + 32 = 121",
            "・83 + 29 = 112"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "a b c d",
            "</code>",
            "・a, b, c, d はそれぞれ 4 枚のカードに書かれた数を表し、半角スペース区切りで与えられます。",
            "・入力は 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "与えられたカードについて、最大スコアを出力してください。",
            "　",
            "出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "2 9 3 8",
                "output": "175",
                "isPublic": true
            },
            {
                "input": "7 8 7 7",
                "output": "164",
                "isPublic": true
            }
        ]
    },
    {
        "id": 8,
        "title": "売上の発表",
        "description": [
            "あなたは PAIZA 社のエンジニアです。あなたはこれまでの売上のデータを横向きの棒グラフにする仕事を振られました。",
            "　",
            "与えられたデータは N 期分のデータで、第 i 期 (1 ≦ i ≦ N) の売上は a_i です。",
            "　",
            "これをそのまま棒グラフにするととても長いグラフになります。ところが、幸いすべての期の売上が R の倍数になっていることに気づきました。",
            "　",
            "そこで、売上のデータの単位を R として棒グラフを表示するプログラムを作成しましょう。",
            "　",
            "入力例 1 では、N = 3 期分のデータが与えられ、第 1 期の売上は a_1 = 5 、第 2 期の売上は a_2 = 15 、第 3 期の売上は a_3 = 10 です。",
            "売上データの単位を R = 5 として棒グラフにすると、下図のようになります。",
            "<code>",
            "1:*..",
            "2:***",
            "3:**.",
            "</code>",
            "このような形で、売上データが与えられた時に棒グラフを出力してください。ただし、グラフの横幅は売り上げの最大値を R で割った数とします。上の例では 15 ÷ 5 = 3 が横幅となります。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N R",
            "a_1",
            "a_2",
            "...",
            "a_N",
            "</code>",
            "・1 行目に売上データの個数を表す整数 N と、データの表示単位を表す整数 R がこの順で半角スペース区切りで与えられます。",
            "・続く N 行のうちの i 行目 (1 ≦ i ≦ N) には、第 i 期の売上を表す整数 a_i がこの順で与えられます。",
            "・入力は合計で N + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "売上の棒グラフを以下の形式で出力してください。",
            "<code>",
            "1:s_i",
            "...",
            "N:s_N",
            "</code>",
            "・期待する出力は N 行からなります。",
            "・i 行目 (1 ≦ i ≦ N) には \"i:\" という表示のあと、第 i 期の棒グラフを表す文字列 s_i を出力して下さい。",
            "・売上データの最大値が M であるとき、s_i は M / R 文字からなり、第 j 文字 (1 ≦ j ≦ M / R) は j × R ≦ a_i を満たすとき \"*\"、そうでないとき \".\" としてください。",
            "・N 行目の出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3 5\n5\n15\n10",
                "output": "1:*..\n2:***\n3:**.",
                "isPublic": true
            },
            {
                "input": "4 2\n12\n8\n16\n10",
                "output": "1:******..\n2:****....\n3:********\n4:*****...",
                "isPublic": true
            }
        ]
    },
    {
        "id": 9,
        "title": "枠で囲む",
        "description": [
            "あなたは友人に向けてメールを送ろうとしています。",
            "ただメールを送るだけではつまらないので、文字列を装飾して送ることにしました。",
            "送りたい文字列の周囲を \"+\" で枠のように囲んで装飾します。",
            "　",
            "このような処理を手作業で行いたくないため、プログラムで装飾しようとしています。",
            "この \"+\" の枠で囲む装飾をするプログラムを書いてください。",
            "　",
            "入力例 1 では \"Paiza\" という文字列を送ります。",
            "この文字を枠で囲み装飾すると、以下のようになります。",
            "<code>",
            "+++++++",
            "+Paiza+",
            "+++++++",
            "</code>"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "S",
            "</code>",
            "・枠で囲んで装飾したい文字列 S が与えられます。",
            "・入力は 1 行となり、末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "送りたい文字列を枠で囲んだ結果を出力してください。",
            "　",
            "出力最終行の末尾に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "Paiza",
                "output": "+++++++\n+Paiza+\n+++++++",
                "isPublic": true
            },
            {
                "input": "TicTacToe",
                "output": "+++++++++++\n+TicTacToe+\n+++++++++++",
                "isPublic": true
            }
        ]
    },
    {
        "id": 10,
        "title": "下桁ルール",
        "description": [
            "ボブとアリスは期末テストの点数で勝負をすることにしました。しかし、ボブとアリスでは普段の成績に差があり、まともな勝負になりません。",
            "　",
            "そこで、期末テストの点数の各位の数を足した数の一の位で勝負することにし、大きい方が勝ちとしました。",
            "　",
            "つまり、85 点であれば 8 + 5 = 13 で、13 の一の位の 3 となります。",
            "　",
            "二人の期末テストの点数が入力されるので、どちらが勝ったか、あるいは引き分けたかを出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "X Y",
            "</code>",
            "・ボブの期末テストの点数を表す整数 X とアリスの期末テストの点数を表す整数 Y がこの順で入力されます。",
            "・入力は 1 行となり、末尾に改行を１つ含みます。"
        ],
        "outputDescription": [
            "ボブが勝った場合は \"Bob\"、アリスが勝った場合は \"Alice\"、引き分けの場合は \"Draw\" と出力してください。",
            "末尾に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "75 81",
                "output": "Alice",
                "isPublic": true
            },
            {
                "input": "100 91",
                "output": "Bob",
                "isPublic": true
            },
            {
                "input": "69 87",
                "output": "Draw",
                "isPublic": true
            }
        ]
    }
]