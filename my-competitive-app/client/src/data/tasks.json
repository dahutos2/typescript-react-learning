[
    {
        "id": 1,
        "title": "ロボットの動作シミュレーション",
        "description": [
            "あなたは、ロボットのプログラミングをしています。",
            "ロボットは N 秒間動き、ロボットを起動してから a_j (j = 1, 2, ... M) の倍数秒経過する度に、それぞれに設定された動作 b_j を行います。",
            "　",
            "ある時間に複数の動作が起こるとき、ロボットは動作が登録された順に、登録された動作を全て行います。",
            "　",
            "ロボットを動作させたときのシミュレーションを行ってください。",
            "　",
            "シミュレーション結果は、以下の書式に従って出力してください。",
            "　",
            "・シミュレーション結果は N 行からなる。",
            "・各 i (i = 1, 2, ..., N) 行目は、以下の通り。",
            "  ・ i 行目には、i 秒経過時のロボットの動作を出力する。",
            "  ・ i 秒目にロボットが動作するとき、i 行目には、登録された動作名を動作する順に半角スペース区切りで出力する。",
            "  ・ i 秒目にロボットが動作しないとき、i 行目には、i を出力する。",
            "　",
            "たとえば、入力例 1 に対する出力は以下のようになります。",
            "　",
            "・1 行目には、1 は 2 の倍数でも 3 の倍数でもないので、\"1\" と出力する。",
            "・2 行目には、2 は 2 の倍数であるが 3 の倍数ではないので、\"foo\" と出力する。",
            "・3 行目には、3 は 2 の倍数ではないが 3 の倍数であるので、\"bar\" と出力する。",
            "・4 行目には、4 は 2 の倍数であるが 3 の倍数ではないので、\"foo\" と出力する。",
            "・5 行目には、5 は 2 の倍数でも 3 の倍数でもないので、\"5\" を出力する。",
            "・6 行目には、6 は 2 の倍数であり 3 の倍数でもあるので、\"foo bar\" と出力する。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M",
            "a_1 b_1",
            "a_2 b_2",
            "...",
            "a_M b_M",
            "</code>",
            "・1 行目には、ロボットが作動する時間を表す整数 N、ロボットの動作の規則の数を表す整数 M がこの順に空白区切りで与えられます。",
            "・続く M 行のうちの j 行目 (1 ≦ j ≦ M) には、j 番目のロボットの動作の規則を表す整数 a_j および動作名を表す文字列 b_j が半角スペース区切りで与えられます。",
            "・入力は合計で M + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "ロボットの動きのシミュレーション結果を以下の形式で出力してください。",
            "<code>",
            "c_1",
            "c_2",
            "...",
            "c_N",
            "</code>",
            "・期待する出力は N 行からなります。",
            "・i 行目には、上記の規則に従い c_i を出力してください。",
            "・末尾に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "6 2\n2 foo\n3 bar",
                "output": "1\nfoo\nbar\nfoo\n5\nfoo bar",
                "isPublic": true
            },
            {
                "input": "12 5\n4 a\n2 p\n3 p\n4 l\n6 e",
                "output": "1\np\np\na p l\n5\np p e\n7\na p l\np\np\n11\na p p l e",
                "isPublic": true
            }
        ]
    },
    {
        "id": 2,
        "title": "嫌いな数字",
        "description": [
            "あなたは運悪く病気にかかってしまい入院しなくてはいけなくなりました。しかし、嫌いな数字があり、その数字が含まれる部屋番号の病室に入ると治療がうまく行かないのでは無いかと不安になってしまいます…。",
            "　",
            "そこで、部屋番号のどの桁にも嫌いな数字が含まれていない病室をリストアップして入院先に伝えることにしました。",
            "　",
            "・1行目に嫌いな数字 n (0から9までの1桁の数字)",
            "・2行目に病室の総数 m",
            "・3行目以降に各病室の部屋番号を表す整数 r_i (1 <= i <= m)",
            "　",
            "が改行区切りで与えられるので、希望する病室の部屋番号をすべて改行区切りで出力して下さい。",
            "　",
            "もし、希望する病室が1つもない場合は\"none\" と出力して下さい。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "n #嫌いな数字",
            "m #病室の総数",
            "r_1 #1個目の部屋番号",
            "r_2 #2個目の部屋番号",
            "...",
            "r_m #m個目の部屋番号",
            "</code>"
        ],
        "outputDescription": [
            "希望する病室をそれぞれ1行に、入力された順番を崩すことなくすべて出力してください。",
            "　",
            "もし希望する部屋が1つもなければ`\"none\" と出力してください。",
            "　",
            "最後は改行し、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "4\n5\n101\n204\n301\n401\n501",
                "output": "101\n301\n501",
                "isPublic": true
            },
            {
                "input": "9\n3\n409\n509\n109",
                "output": "none",
                "isPublic": true
            },
            {
                "input": "1\n6\n101\n102\n205\n224\n231\n314",
                "output": "205\n224",
                "isPublic": true
            }
        ]
    },
    {
        "id": 3,
        "title": "ポイントカードの計算",
        "description": [
            "今は月末。そろそろ今月の家計簿をつけないといけません。 あなたの手元には、とあるスーパーマーケットのレシートの山があります。",
            "　",
            "スーパーマーケットにはポイントカードが導入されていて、買い物をするたびに購入金額に応じたポイントがたまります。 加算されるポイントは次の 3 つのルールに従って決定されます。",
            "　",
            "1. 通常は購入金額の 1 ％（小数点以下切り捨て）とする",
            "2. ただし、3 のつく日は購入金額の 3 ％（小数点以下切り捨て）とする",
            "3. ただし、5 のつく日は購入金額の 5 ％（小数点以下切り捨て）とする",
            "　",
            "あなたはポイントカードに、今、何ポイントたまっているのかが気になりました。 レシートの数が多いので、手で計算するのは大変です。",
            "　",
            "早速、これを計算するプログラムを書きましょう。 ただし、今月のはじめには全くポイントがたまっておらず（0 ポイント）、また、今月中ポイントは消費されなかったものとします。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N　　　　#各レシートの数",
            "d_1 p_1　#1枚目のレシートの日付 d_1 日, 購入金額 p_1 円",
            "d_2 p_2　#2枚目のレシートの日付 d_2 日, 購入金額 p_2 円",
            "...",
            "d_N p_N　#N枚目のレシートの日付 d_N 日, 購入金額 p_N 円",
            "</code>",
            "1行目には今月分のレシートの枚数を表す整数 N が入力されます。続く N 行には各レシートの情報が入力されます。",
            "すなわち、d_i p_i は i 枚目のレシートが発行された日付が d_i 日であり、このときの購入金額が p_i 円であることを表します。"
        ],
        "outputDescription": [
            "今月末にポイントカードにたまっているポイントの値を１行に出力してください。",
            "　",
            "最後は改行し、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n1 1024\n11 2048\n21 4196",
                "output": "71",
                "isPublic": true
            },
            {
                "input": "1\n30 340",
                "output": "10",
                "isPublic": true
            },
            {
                "input": "2\n5 10000\n12 10000",
                "output": "600",
                "isPublic": true
            }
        ]
    },
    {
        "id": 4,
        "title": "ハイアンドロー・カードゲーム",
        "description": [
            "XYZカードゲームは、複数枚の子カードそれぞれが、1枚の親カードとの強弱関係で勝負するゲームです。",
            "　",
            "どのカードにも2つの番号が書かれています。",
            "1つ目の番号は1から10の整数、2つ目の番号は1から4の整数で表されます。",
            "また、2つの番号の各組み合わせは1枚だけカードの束に含まれています。(同じカードが2枚以上存在しません)",
            "　",
            "2枚のカードの強弱関係は、次のルールによって決まります。",
            "・1つ目の番号が大きいカードのほうが強い",
            "・1つ目の番号が同じ場合、2つ目の番号が小さいカードのほうが強い",
            "　",
            "親カードと子カードの情報が与えられるので、それらの強弱関係を調べるプログラムを作成してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "a b",
            "n",
            "A_1 B_1",
            "...",
            "A_n B_n",
            "</code>",
            "1行目では親カードの情報が与えられます。親カードの1つ目の番号は a、2つ目の番号は b で表されます。",
            "2行目では整数 n が与えられます。",
            "3行目から n 行の入力が続き、各行では、子カード i (1 ≦ i ≦ n)の情報が与えられます。",
            "子カード i の1つ目の番号は A_i、2つ目の番号は B_i で表されます。"
        ],
        "outputDescription": [
            "出力の i 行目では、親カードと子カード i の強弱関係を調べたときに",
            "親カードの方が強いならば \"High\"、そうでなければ \"Low\" と出力してください。",
            "各行では、\"High\" または \"Low\" 以外の余分な文字、空白を含んではいけません。",
            "　",
            "最後は改行し、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 1\n2\n7 2\n1 4",
                "output": "Low\nHigh",
                "isPublic": true
            },
            {
                "input": "1\n30 340",
                "output": "10",
                "isPublic": true
            },
            {
                "input": "7 3\n4\n7 1\n7 4\n5 3\n10 1",
                "output": "600\nLow\nHigh\nHigh\nLow",
                "isPublic": true
            }
        ]
    },
    {
        "id": 5,
        "title": "完全数とほぼ完全数",
        "description": [
            "N を 2 以上の整数とし、N の約数のうち N 自身を除いたものの和を S とします。 このとき",
            "　",
            "・N = S となるような N を完全数",
            "・|N-S| = 1 となるような N をほぼ完全数",
            "　",
            "と言うことにしましょう。ここで、|N-S| は N-S の絶対値を意味します。",
            "　",
            "たとえば、N = 28 のとき、28 の約数は 1, 2, 4, 7, 14, 28 なので、S = 1+2+4+7+14 = 28 となります。従って、28 は完全数です。",
            "また、N = 16 のときには S = 1+2+4+8 = 15 となるので、16 はほぼ完全数です。",
            "　",
            "入力された整数が完全数かほぼ完全数かそのいずれでもないかを判定するプログラムを作成してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "Q",
            "N_1",
            "...",
            "N_Q",
            "</code>",
            "1行目には判定したい整数の個数 Q が入力されます。続く Q 行には整数 N_1, ..., N_Q が入力されます。"
        ],
        "outputDescription": [
            "各 N_i に対して",
            "　",
            "・N_i が完全数であれば \"perfect\"",
            "・N_i がほぼ完全数であれば \"nearly\"",
            "・どちらでもなければ \"neither\"",
            "　",
            "と 1 行に出力してください。",
            "　",
            "最後は改行し、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n28\n16\n777",
                "output": "perfect\nnearly\nneither",
                "isPublic": true
            },
            {
                "input": "4\n3\n4\n5\n6",
                "output": "neither\nnearly\nneither\nperfect",
                "isPublic": true
            }
        ]
    },
    {
        "id": 6,
        "title": "カード並べ",
        "description": [
            "フライト中に退屈してしまったあなたは、持っているトランプを使用した簡単な遊びを考えました。",
            "　",
            "この遊びでは 1 から 9 までの数字のカードのみを 4 枚使用します。",
            "ただし、この 4 枚の中で同じ数値のカードが重複する事もあります。",
            "ルールは以下の通りです。",
            "　",
            "4 枚のカードを横に並べます。",
            "左から 2 枚のカード、右から 2 枚のカードをそれぞれ 2 ケタの整数とみなし、和を計算します。",
            "あらゆる並べ方を試し、和の最大値（最大スコア）を求めます。",
            "　",
            "カード 4 枚に書かれた数が与えられるので、最大スコアを出力してください。",
            "入力例 1 の 2, 9, 3, 8 の 4 枚を使う場合、以下の 12 通りの和の最大値 175 が最大スコアとなります。",
            "　",
            "カードの 4 枚の並べ方は 4! = 24 通り存在しますが、足し算は順序に依存しないため、12 通りのみ考慮すればよいことに注意してください。",
            "たとえば、9, 2, 3, 8 の順で並べた場合のスコアは 92 + 38 = 130 となります。",
            "　",
            "・92 + 38 = 130",
            "・92 + 83 = 175",
            "・93 + 28 = 121",
            "・93 + 82 = 175",
            "・98 + 23 = 121",
            "・98 + 32 = 130",
            "・39 + 28 = 67",
            "・38 + 29 = 67",
            "・82 + 39 = 121",
            "・89 + 23 = 112",
            "・89 + 32 = 121",
            "・83 + 29 = 112"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "a b c d",
            "</code>",
            "・a, b, c, d はそれぞれ 4 枚のカードに書かれた数を表し、半角スペース区切りで与えられます。",
            "・入力は 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "与えられたカードについて、最大スコアを出力してください。",
            "　",
            "出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "2 9 3 8",
                "output": "175",
                "isPublic": true
            },
            {
                "input": "7 8 7 7",
                "output": "164",
                "isPublic": true
            }
        ]
    },
    {
        "id": 7,
        "title": "売上の発表",
        "description": [
            "あなたは XYZ 社のエンジニアです。あなたはこれまでの売上のデータを横向きの棒グラフにする仕事を振られました。",
            "　",
            "与えられたデータは N 期分のデータで、第 i 期 (1 ≦ i ≦ N) の売上は a_i です。",
            "　",
            "これをそのまま棒グラフにするととても長いグラフになります。ところが、幸いすべての期の売上が R の倍数になっていることに気づきました。",
            "　",
            "そこで、売上のデータの単位を R として棒グラフを表示するプログラムを作成しましょう。",
            "　",
            "入力例 1 では、N = 3 期分のデータが与えられ、第 1 期の売上は a_1 = 5 、第 2 期の売上は a_2 = 15 、第 3 期の売上は a_3 = 10 です。",
            "売上データの単位を R = 5 として棒グラフにすると、下図のようになります。",
            "<code>",
            "1:*..",
            "2:***",
            "3:**.",
            "</code>",
            "このような形で、売上データが与えられた時に棒グラフを出力してください。ただし、グラフの横幅は売り上げの最大値を R で割った数とします。上の例では 15 ÷ 5 = 3 が横幅となります。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N R",
            "a_1",
            "a_2",
            "...",
            "a_N",
            "</code>",
            "・1 行目に売上データの個数を表す整数 N と、データの表示単位を表す整数 R がこの順で半角スペース区切りで与えられます。",
            "・続く N 行のうちの i 行目 (1 ≦ i ≦ N) には、第 i 期の売上を表す整数 a_i がこの順で与えられます。",
            "・入力は合計で N + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "売上の棒グラフを以下の形式で出力してください。",
            "<code>",
            "1:s_i",
            "...",
            "N:s_N",
            "</code>",
            "・期待する出力は N 行からなります。",
            "・i 行目 (1 ≦ i ≦ N) には \"i:\" という表示のあと、第 i 期の棒グラフを表す文字列 s_i を出力して下さい。",
            "・売上データの最大値が M であるとき、s_i は M / R 文字からなり、第 j 文字 (1 ≦ j ≦ M / R) は j × R ≦ a_i を満たすとき \"*\"、そうでないとき \".\" としてください。",
            "・N 行目の出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3 5\n5\n15\n10",
                "output": "1:*..\n2:***\n3:**.",
                "isPublic": true
            },
            {
                "input": "4 2\n12\n8\n16\n10",
                "output": "1:******..\n2:****....\n3:********\n4:*****...",
                "isPublic": true
            }
        ]
    },
    {
        "id": 8,
        "title": "枠で囲む",
        "description": [
            "あなたは友人に向けてメールを送ろうとしています。",
            "ただメールを送るだけではつまらないので、文字列を装飾して送ることにしました。",
            "送りたい文字列の周囲を \"+\" で枠のように囲んで装飾します。",
            "　",
            "このような処理を手作業で行いたくないため、プログラムで装飾しようとしています。",
            "この \"+\" の枠で囲む装飾をするプログラムを書いてください。",
            "　",
            "入力例 1 では \"Apple\" という文字列を送ります。",
            "この文字を枠で囲み装飾すると、以下のようになります。",
            "<code>",
            "+++++++",
            "+Apple+",
            "+++++++",
            "</code>"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "S",
            "</code>",
            "・枠で囲んで装飾したい文字列 S が与えられます。",
            "・入力は 1 行となり、末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "送りたい文字列を枠で囲んだ結果を出力してください。",
            "　",
            "出力最終行の末尾に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "Apple",
                "output": "+++++++\n+Apple+\n+++++++",
                "isPublic": true
            },
            {
                "input": "TicTacToe",
                "output": "+++++++++++\n+TicTacToe+\n+++++++++++",
                "isPublic": true
            }
        ]
    },
    {
        "id": 9,
        "title": "下桁ルール",
        "description": [
            "ボブとアリスは期末テストの点数で勝負をすることにしました。しかし、ボブとアリスでは普段の成績に差があり、まともな勝負になりません。",
            "　",
            "そこで、期末テストの点数の各位の数を足した数の一の位で勝負することにし、大きい方が勝ちとしました。",
            "　",
            "つまり、85 点であれば 8 + 5 = 13 で、13 の一の位の 3 となります。",
            "　",
            "二人の期末テストの点数が入力されるので、どちらが勝ったか、あるいは引き分けたかを出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "X Y",
            "</code>",
            "・ボブの期末テストの点数を表す整数 X とアリスの期末テストの点数を表す整数 Y がこの順で入力されます。",
            "・入力は 1 行となり、末尾に改行を１つ含みます。"
        ],
        "outputDescription": [
            "ボブが勝った場合は \"Bob\"、アリスが勝った場合は \"Alice\"、引き分けの場合は \"Draw\" と出力してください。",
            "末尾に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "75 81",
                "output": "Alice",
                "isPublic": true
            },
            {
                "input": "100 91",
                "output": "Bob",
                "isPublic": true
            },
            {
                "input": "69 87",
                "output": "Draw",
                "isPublic": true
            }
        ]
    },
    {
        "id": 10,
        "title": "温度データの解析",
        "description": [
            "あなたは気象観測所で働いており、過去N日間の気温データを分析する必要があります。",
            "　",
            "各日の最高気温が与えられるので、以下の情報を計算してください。",
            "　",
            "1. 平均気温（小数点以下第一位まで）",
            "2. 最高気温と最低気温",
            "3. 平均気温を超えた日の数",
            "　",
            "これらの情報を基に、気象レポートを作成してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N",
            "T_1",
            "T_2",
            "...",
            "T_N",
            "</code>",
            "・1行目に観測日数を表す整数 N (1 ≤ N ≤ 100) が与えられます。",
            "・続く N 行のうちの i 行目には、第 i 日目の最高気温 T_i (−50 ≤ T_i ≤ 50) が整数で与えられます。",
            "・入力は合計で N + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "以下の形式で解析結果を出力してください。",
            "<code>",
            "平均気温: A",
            "最高気温: H",
            "最低気温: L",
            "平均を超えた日数: C",
            "</code>",
            "・1行目に平均気温 A を小数点以下第一位まで出力してください。",
            "・2行目に最高気温 H を出力してください。",
            "・3行目に最低気温 L を出力してください。",
            "・4行目に平均気温を超えた日数 C を出力してください。",
            "　",
            "・各行の末尾に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5\n20\n22\n19\n25\n18",
                "output": "平均気温: 20.8\n最高気温: 25\n最低気温: 18\n平均を超えた日数: 2",
                "isPublic": true
            },
            {
                "input": "3\n-5\n0\n5",
                "output": "平均気温: 0.0\n最高気温: 5\n最低気温: -5\n平均を超えた日数: 1",
                "isPublic": true
            }
        ]
    },
    {
        "id": 11,
        "title": "在庫管理システム",
        "description": [
            "あなたはオンラインストアの在庫管理システムを開発しています。",
            "　",
            "システムでは、商品の入庫と出庫を記録し、現在の在庫数を管理します。",
            "　",
            "与えられた一連の操作に基づいて、各商品の最終在庫数を出力してください。",
            "　",
            "操作は以下の2種類です。",
            "　",
            "1. 入庫: \"IN 商品名 数量\"",
            "2. 出庫: \"OUT 商品名 数量\"",
            "　",
            "在庫数が0未満になる操作は無効とし、その操作は無視してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "Q",
            "操作_1",
            "操作_2",
            "...",
            "操作_Q",
            "</code>",
            "・1行目に操作の総数を表す整数 Q (1 ≤ Q ≤ 1000) が与えられます。",
            "・続く Q 行のうちの i 行目には、i 番目の操作が \"IN 商品名 数量\" または \"OUT 商品名 数量\" の形式で与えられます。",
            "・商品名はアルファベットのみで構成される文字列 (1 ≤ 長さ ≤ 20)。",
            "・数量は整数 (1 ≤ 数量 ≤ 1000)。",
            "・入力は合計で Q + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "最終的な在庫数を以下の形式で出力してください。",
            "<code>",
            "商品名_1 在庫数_1",
            "商品名_2 在庫数_2",
            "...",
            "商品名_K 在庫数_K",
            "</code>",
            "・各商品の在庫数を商品名のアルファベット順に並べて出力してください。",
            "・在庫が1つもない商品は出力しません。",
            "・商品が1つも在庫がない場合は \"No stock\" と出力してください。",
            "　",
            "・各行の末尾に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "6\nIN Apple 50\nIN Banana 30\nOUT Apple 20\nIN Orange 10\nOUT Banana 40\nOUT Orange 5",
                "output": "Apple 30\nOrange 5",
                "isPublic": true
            },
            {
                "input": "3\nOUT Mango 10\nIN Mango 20\nOUT Mango 15",
                "output": "Mango 5",
                "isPublic": true
            },
            {
                "input": "2\nOUT Peach 5\nOUT Cherry 10",
                "output": "No stock",
                "isPublic": true
            }
        ]
    },
    {
        "id": 12,
        "title": "文字列の圧縮",
        "description": [
            "あなたは文字列の圧縮アルゴリズムを開発しています。",
            "　",
            "与えられた文字列中の連続する同じ文字を、文字とその連続数に置き換えます。",
            "　",
            "例えば、\"aaabbc\" は \"a3b2c1\" に圧縮されます。",
            "",
            "圧縮後の文字列を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "S",
            "</code>",
            "・圧縮したい文字列 S が与えられます。",
            "・S は英小文字のみで構成される文字列であり、1 ≤ |S| ≤ 1000。",
            "・入力は1行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "圧縮後の文字列を出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "aaabbc",
                "output": "a3b2c1",
                "isPublic": true
            },
            {
                "input": "abcde",
                "output": "a1b1c1d1e1",
                "isPublic": true
            },
            {
                "input": "zzzzzz",
                "output": "z6",
                "isPublic": true
            }
        ]
    },
    {
        "id": 13,
        "title": "迷路の出口",
        "description": [
            "あなたはN×Mの迷路に閉じ込められました。",
            "　",
            "迷路は壁と通路で構成されており、壁は '#'、通路は '.' で表されます。",
            "　",
            "スタート地点は迷路の左上 (1,1) で、ゴール地点は迷路の右下 (N,M) です。",
            "　",
            "上下左右に移動できる場合のみ通行可能です。",
            "　",
            "迷路を脱出できるかどうかを判定してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M",
            "行_1",
            "行_2",
            "...",
            "行_N",
            "</code>",
            "・1行目に迷路の行数 N (1 ≤ N ≤ 100) と列数 M (1 ≤ M ≤ 100) が空白区切りで与えられます。",
            "・続く N 行のうちの i 行目には、迷路の i 行目の状態がM文字で与えられます。",
            "・'S' はスタート地点、'G' はゴール地点を表します。スタートとゴールは必ず通路です。",
            "・入力は合計で N + 1 行となり、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "迷路を脱出できる場合は \"Yes\"、できない場合は \"No\" と出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3 3\nS..\n.#.\n..G",
                "output": "Yes",
                "isPublic": true
            },
            {
                "input": "4 4\nS#..\n.##.\n...#\n..#G",
                "output": "No",
                "isPublic": true
            },
            {
                "input": "2 2\nSG\n##",
                "output": "Yes",
                "isPublic": true
            }
        ]
    },
    {
        "id": 14,
        "title": "カレンダーの日数",
        "description": [
            "あなたは特定の月の日数を知りたいと考えています。",
            "　",
            "与えられた月と年から、その月の日数を出力してください。",
            "　",
            "うるう年の判定も考慮してください。",
            "　",
            "うるう年は以下の条件を満たします。",
            "　",
            "1. 西暦年が4で割り切れる年はうるう年である。",
            "2. ただし、西暦年が100で割り切れる年はうるう年ではない。",
            "3. ただし、西暦年が400で割り切れる年はうるう年である。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "Y M",
            "</code>",
            "・Y は西暦年を表す整数 (1 ≤ Y ≤ 9999)。",
            "・M は月を表す整数 (1 ≤ M ≤ 12)。",
            "・入力は1行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "指定された月の日数を出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "2020 2",
                "output": "29",
                "isPublic": true
            },
            {
                "input": "1900 2",
                "output": "28",
                "isPublic": true
            },
            {
                "input": "2000 2",
                "output": "29",
                "isPublic": true
            },
            {
                "input": "2021 11",
                "output": "30",
                "isPublic": true
            }
        ]
    },
    {
        "id": 15,
        "title": "数列の部分和",
        "description": [
            "与えられた数列から部分集合を選び、その和が指定された値に等しくなるかを判定します。",
            "　",
            "数列には重複する数が含まれることがあります。",
            "　",
            "部分集合は数列の要素を順不同で選んだものとし、同じ要素を複数回選ぶことはできません。",
            "　",
            "指定された値に等しい部分集合が存在する場合は \"Yes\"、存在しない場合は \"No\" と出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N S",
            "A_1 A_2 ... A_N",
            "</code>",
            "・1行目に数列の要素数 N (1 ≤ N ≤ 20) と目標値 S (1 ≤ S ≤ 10^6) が空白区切りで与えられます。",
            "・2行目に数列のN個の要素 A_i (1 ≤ A_i ≤ 10^5) が空白区切りで与えられます。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "部分集合の和が S に等しい場合は \"Yes\"、そうでない場合は \"No\" を出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 9\n3 34 4 12 5",
                "output": "Yes",
                "isPublic": true
            },
            {
                "input": "3 7\n2 4 6",
                "output": "No",
                "isPublic": true
            },
            {
                "input": "4 10\n1 2 3 4",
                "output": "Yes",
                "isPublic": true
            }
        ]
    },
    {
        "id": 16,
        "title": "文字列の反転と比較",
        "description": [
            "与えられた2つの文字列を反転させ、その結果が一致するかどうかを判定します。",
            "　",
            "反転は文字列の文字を逆順に並べ替える操作です。",
            "　",
            "例えば、\"abc\" を反転すると \"cba\" になります。",
            "　",
            "反転後の文字列が同じ場合は \"Yes\"、異なる場合は \"No\" と出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "S1",
            "S2",
            "</code>",
            "・1行目に1つ目の文字列 S1 が与えられます。",
            "・2行目に2つ目の文字列 S2 が与えられます。",
            "・S1 と S2 は英大文字および英小文字のみで構成される文字列であり、1 ≤ |S1|, |S2| ≤ 1000。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "反転後の文字列が一致する場合は \"Yes\"、一致しない場合は \"No\" を出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "abc\ncba",
                "output": "Yes",
                "isPublic": true
            },
            {
                "input": "hello\nolleh",
                "output": "Yes",
                "isPublic": true
            },
            {
                "input": "OpenAI\nIAnepO",
                "output": "No",
                "isPublic": true
            },
            {
                "input": "Racecar\nracecaR",
                "output": "No",
                "isPublic": true
            }
        ]
    },
    {
        "id": 17,
        "title": "二進数のビットカウント",
        "description": [
            "与えられた整数を二進数に変換し、'1' のビット数をカウントします。",
            "　",
            "例えば、10 を二進数にすると \"1010\" となり、'1' のビット数は2です。",
            "　",
            "ビット数を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "X_1",
            "X_2",
            "...",
            "X_T",
            "</code>",
            "・1行目にテストケースの数 T (1 ≤ T ≤ 100) が与えられます。",
            "・続く T 行のうちの i 行目には、整数 X_i (0 ≤ X_i ≤ 10^9) が与えられます。",
            "・入力は T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各テストケースごとに、'1' のビット数を1行に出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n10\n7\n0",
                "output": "2\n3\n0",
                "isPublic": true
            },
            {
                "input": "2\n15\n8",
                "output": "4\n1",
                "isPublic": true
            }
        ]
    },
    {
        "id": 18,
        "title": "配列の回転",
        "description": [
            "与えられた配列を右にK回回転させます。",
            "　",
            "回転とは、配列の最後の要素を先頭に移動させる操作です。",
            "　",
            "例えば、配列 [1, 2, 3, 4, 5] を2回回転すると [4, 5, 1, 2, 3] になります。",
            "　",
            "回転後の配列を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N K",
            "A_1 A_2 ... A_N",
            "</code>",
            "・1行目に配列の要素数 N (1 ≤ N ≤ 10^5) と回転回数 K (0 ≤ K ≤ 10^9) が空白区切りで与えられます。",
            "・2行目に配列のN個の要素 A_i (1 ≤ A_i ≤ 10^9) が空白区切りで与えられます。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "回転後の配列を空白区切りで1行に出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 2\n1 2 3 4 5",
                "output": "4 5 1 2 3",
                "isPublic": true
            },
            {
                "input": "3 4\n10 20 30",
                "output": "20 30 10",
                "isPublic": true
            },
            {
                "input": "4 0\n7 8 9 10",
                "output": "7 8 9 10",
                "isPublic": true
            }
        ]
    },
    {
        "id": 19,
        "title": "最長共通部分列",
        "description": [
            "2つの文字列 S と T が与えられます。",
            "　",
            "これらの文字列の最長共通部分列（Longest Common Subsequence, LCS）の長さを求めてください。",
            "　",
            "最長共通部分列とは、S と T の両方に含まれる最長の文字列です。文字の順序は保持されますが、連続している必要はありません。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "S",
            "T",
            "</code>",
            "・1行目に文字列 S が与えられます。",
            "・2行目に文字列 T が与えられます。",
            "・S と T は英大文字および英小文字のみで構成される文字列であり、1 ≤ |S|, |T| ≤ 1000。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "最長共通部分列の長さを整数で出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "ABCBDAB\nBDCABC",
                "output": "4",
                "isPublic": true
            },
            {
                "input": "AGGTAB\nGXTXAYB",
                "output": "4",
                "isPublic": true
            },
            {
                "input": "ABCDEF\nFBDAMN",
                "output": "2",
                "isPublic": true
            }
        ]
    },
    {
        "id": 20,
        "title": "シフト演算の適用",
        "description": [
            "あなたは整数 X に対して、左シフト演算と右シフト演算を適用します。",
            "　",
            "左シフト演算 << は2倍、右シフト演算 >> は整数除算で2で割った値を意味します。",
            "　",
            "与えられた操作列に従ってシフト演算を適用し、最終的な値を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "X",
            "Q",
            "op_1",
            "op_2",
            "...",
            "op_Q",
            "</code>",
            "・1行目に初期値 X (−10^9 ≤ X ≤ 10^9) が与えられます。",
            "・2行目に操作の数 Q (1 ≤ Q ≤ 10^5) が与えられます。",
            "・続く Q 行のうちの i 行目には、i 番目の操作が \"<<\" または \">>\" のいずれかで与えられます。",
            "・入力は Q + 2 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "最終的な値を出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "4\n3\n<<\n>>\n<<",
                "output": "8",
                "isPublic": true
            },
            {
                "input": "-8\n2\n>>\n>>",
                "output": "-2",
                "isPublic": true
            },
            {
                "input": "0\n5\n<<\n<<\n>>\n>>\n<<",
                "output": "0",
                "isPublic": true
            }
        ]
    },
    {
        "id": 21,
        "title": "行列の乗算",
        "description": [
            "あなたは、2つの行列 A と B の積を計算するプログラムを書いています。",
            "行列の積は、行列 A の行と行列 B の列の内積で求められます。",
            "　",
            "与えられた2つの行列の積を計算し、結果の行列を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M K",
            "A_11 A_12 ... A_1M",
            "...",
            "A_N1 A_N2 ... A_NM",
            "B_11 B_12 ... B_1K",
            "...",
            "B_M1 B_M2 ... B_MK",
            "</code>",
            "・1行目に行列 A の行数 N (1 ≤ N ≤ 100)、列数 M (1 ≤ M ≤ 100)、行列 B の列数 K (1 ≤ K ≤ 100) が空白区切りで与えられます。",
            "・続く N 行には行列 A の各行の要素 A_ij (−1000 ≤ A_ij ≤ 1000) が与えられます。",
            "・その後の M 行には行列 B の各行の要素 B_ij (−1000 ≤ B_ij ≤ 1000) が与えられます。",
            "・入力は合計で N + M + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。"
        ],
        "outputDescription": [
            "行列の積 C を以下の形式で出力してください。",
            "<code>",
            "C_11 C_12 ... C_1K",
            "...",
            "C_N1 C_N2 ... C_NK",
            "</code>",
            "・出力は N 行からなり、各行には C の各要素を空白区切りで出力してください。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "2 3 2\n1 2 3\n4 5 6\n7 8\n9 10\n11 12",
                "output": "58 64\n139 154",
                "isPublic": true
            },
            {
                "input": "1 2 3\n2 4\n1 3 5",
                "output": "6 14 22",
                "isPublic": true
            },
            {
                "input": "3 3 3\n1 0 2\n-1 3 1\n4 2 0\n3 1 2\n2 1 0\n1 4 3",
                "output": "5 9 7\n8 14 5\n13 9 8",
                "isPublic": true
            }
        ]
    },
    {
        "id": 22,
        "title": "文字列のパターンマッチング",
        "description": [
            "あなたは、テキスト内に特定のパターンが含まれているかを判定するプログラムを書いています。",
            "与えられたテキスト S とパターン P に対して、P が S に含まれているかどうかを判定してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "S_1",
            "P_1",
            "...",
            "S_T",
            "P_T",
            "</code>",
            "・1行目にテストケースの数 T (1 ≤ T ≤ 100) が与えられます。",
            "・続く 2T 行では、各テストケースごとに 2 行に分かれて文字列 S_i とパターン P_i が与えられます。",
            "・S_i と P_i は英大文字および英小文字のみで構成される文字列であり、1 ≤ |S_i|, |P_i| ≤ 1000。",
            "・入力は 2T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各テストケースに対して、パターン P_i がテキスト S_i に含まれている場合は \"Yes\"、含まれていない場合は \"No\" と出力してください。",
            "　",
            "・各テストケースの出力は1行であり、出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\nhello world\nwor\nabcdefg\nxyz\npatternmatching\nmatch",
                "output": "Yes\nNo\nYes",
                "isPublic": true
            },
            {
                "input": "2\nOpenAI ChatGPT\nChat\nProgramming\ngram",
                "output": "Yes\nYes",
                "isPublic": true
            },
            {
                "input": "1\nteststring\ntesting",
                "output": "No",
                "isPublic": true
            }
        ]
    },
    {
        "id": 23,
        "title": "グラフの経路探索",
        "description": [
            "あなたは、無向グラフが与えられたときに、特定の2つの頂点間にパスが存在するかを判定するプログラムを書いています。",
            "グラフは頂点番号 1 から N まであり、M 本の辺で構成されています。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M",
            "u_1 v_1",
            "...",
            "u_M v_M",
            "S G",
            "</code>",
            "・1行目に頂点数 N (1 ≤ N ≤ 10^5) と辺の数 M (0 ≤ M ≤ 10^5) が空白区切りで与えられます。",
            "・続く M 行には、各辺を表す頂点のペア u_i と v_i (1 ≤ u_i, v_i ≤ N) が空白区切りで与えられます。",
            "・最後の行には、開始頂点 S と終了頂点 G (1 ≤ S, G ≤ N) が空白区切りで与えられます。",
            "・入力は M + 2 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "頂点 S から頂点 G へのパスが存在する場合は \"Yes\"、存在しない場合は \"No\" と出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 4\n1 2\n2 3\n3 4\n4 5\n1 5",
                "output": "Yes",
                "isPublic": true
            },
            {
                "input": "3 1\n1 2\n2 3",
                "output": "Yes",
                "isPublic": true
            },
            {
                "input": "4 2\n1 2\n3 4\n1 4",
                "output": "No",
                "isPublic": true
            }
        ]
    },
    {
        "id": 24,
        "title": "ソートされたリストの結合",
        "description": [
            "あなたは2つのソートされたリストが与えられたとき、それらを1つのソートされたリストに結合するプログラムを書いています。",
            "各リストは昇順にソートされています。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M",
            "A_1 A_2 ... A_N",
            "B_1 B_2 ... B_M",
            "</code>",
            "・1行目に最初のリストの長さ N (0 ≤ N ≤ 10^5) と2番目のリストの長さ M (0 ≤ M ≤ 10^5) が空白区切りで与えられます。",
            "・2行目に最初のリストの要素 A_i (−10^9 ≤ A_i ≤ 10^9) が昇順に並んで与えられます。",
            "・3行目に2番目のリストの要素 B_i (−10^9 ≤ B_i ≤ 10^9) が昇順に並んで与えられます。",
            "・入力は3行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "結合されたソート済みリストを空白区切りで1行に出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3 4\n1 3 5\n2 4 6 8",
                "output": "1 2 3 4 5 6 8",
                "isPublic": true
            },
            {
                "input": "0 3\n\n-1 0 1",
                "output": "-1 0 1",
                "isPublic": true
            },
            {
                "input": "5 5\n1 2 3 4 5\n1 2 3 4 5",
                "output": "1 1 2 2 3 3 4 4 5 5",
                "isPublic": true
            }
        ]
    },
    {
        "id": 25,
        "title": "数値の階乗",
        "description": [
            "あなたは与えられた整数の階乗を計算するプログラムを書いています。",
            "階乗とは、1からその数までのすべての整数の積です。",
            "例えば、5 の階乗は 1×2×3×4×5 = 120 です。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "X_1",
            "X_2",
            "...",
            "X_T",
            "</code>",
            "・1行目にテストケースの数 T (1 ≤ T ≤ 20) が与えられます。",
            "・続く T 行のうちの i 行目には、整数 X_i (0 ≤ X_i ≤ 20) が与えられます。",
            "・入力は T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各テストケースに対して、階乗の結果を1行に出力してください。",
            "　",
            "・0 の階乗は 1 と定義します。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n5\n0\n10",
                "output": "120\n1\n3628800",
                "isPublic": true
            },
            {
                "input": "2\n1\n20",
                "output": "1\n2432902008176640000",
                "isPublic": true
            },
            {
                "input": "1\n3",
                "output": "6",
                "isPublic": true
            }
        ]
    },
    {
        "id": 26,
        "title": "データのフィルタリング",
        "description": [
            "あなたはデータベースから取得した数値データをフィルタリングするプログラムを書いています。",
            "与えられたリストから、指定された範囲内の数値のみを抽出してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N L R",
            "X_1 X_2 ... X_N",
            "</code>",
            "・1行目にリストの長さ N (1 ≤ N ≤ 10^5) と範囲の下限 L、上限 R (−10^9 ≤ L ≤ R ≤ 10^9) が空白区切りで与えられます。",
            "・2行目にリストの N 個の整数 X_i (−10^9 ≤ X_i ≤ 10^9) が空白区切りで与えられます。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "フィルタリングされた数値をリストの順序を保ったまま空白区切りで1行に出力してください。",
            "　",
            "・フィルタリングされた数値が1つもない場合は \"None\" と出力してください。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 10 20\n5 15 25 10 20",
                "output": "15 10 20",
                "isPublic": true
            },
            {
                "input": "3 0 5\n-1 0 6",
                "output": "0",
                "isPublic": true
            },
            {
                "input": "4 100 200\n50 150 250 175",
                "output": "150 175",
                "isPublic": true
            }
        ]
    },
    {
        "id": 27,
        "title": "デジタル時計の時刻変換",
        "description": [
            "デジタル時計は24時間形式で時刻を表示します。あなたは12時間形式で与えられた時刻を24時間形式に変換するプログラムを書いています。",
            "　",
            "AM/PMの指定に基づいて、正しい24時間形式の時刻を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "hh:mm AM/PM",
            "...",
            "hh:mm AM/PM",
            "</code>",
            "・1行目にテストケースの数 T (1 ≤ T ≤ 100) が与えられます。",
            "・続く T 行のうちの i 行目には、i 番目の時刻が \"hh:mm AM\" または \"hh:mm PM\" の形式で与えられます。",
            "・時 hh は 01 から 12 の2桁、分 mm は 00 から 59 の2桁です。",
            "・入力は T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各テストケースに対して、24時間形式の時刻を \"HH:MM\" の形式で出力してください。",
            "",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n12:00 PM\n01:05 AM\n11:59 PM",
                "output": "12:00\n01:05\n23:59",
                "isPublic": true
            },
            {
                "input": "2\n07:30 PM\n12:00 AM",
                "output": "19:30\n00:00",
                "isPublic": true
            },
            {
                "input": "1\n03:45 PM",
                "output": "15:45",
                "isPublic": true
            }
        ]
    },
    {
        "id": 28,
        "title": "最小値と最大値の差",
        "description": [
            "あなたは与えられた数列の中で、最小値と最大値の差を計算するプログラムを書いています。",
            "　",
            "数列の中で最も小さい値と最も大きい値の差を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N",
            "X_1 X_2 ... X_N",
            "</code>",
            "・1行目に数列の長さ N (2 ≤ N ≤ 10^5) が与えられます。",
            "・2行目に数列の N 個の整数 X_i (−10^9 ≤ X_i ≤ 10^9) が空白区切りで与えられます。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "最小値と最大値の差を整数で出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5\n3 1 4 1 5",
                "output": "4",
                "isPublic": true
            },
            {
                "input": "3\n-2 -2 -2",
                "output": "0",
                "isPublic": true
            },
            {
                "input": "4\n10 20 30 40",
                "output": "30",
                "isPublic": true
            }
        ]
    },
    {
        "id": 29,
        "title": "データベースの検索",
        "description": [
            "あなたは、データベース内のレコードを検索するプログラムを書いています。",
            "　",
            "各レコードには名前と年齢が含まれています。",
            "　",
            "指定された年齢範囲内の全ての名前をアルファベット順に出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N Q",
            "Name_1 Age_1",
            "...",
            "Name_N Age_N",
            "L_1 R_1",
            "...",
            "L_Q R_Q",
            "</code>",
            "・1行目にレコードの数 N (1 ≤ N ≤ 10^5) とクエリの数 Q (1 ≤ Q ≤ 10^5) が空白区切りで与えられます。",
            "・続く N 行には各レコードの名前 Name_i (1 ≤ |Name_i| ≤ 20, 英大文字・小文字) と年齢 Age_i (0 ≤ Age_i ≤ 120) が空白区切りで与えられます。",
            "・続く Q 行には各クエリの年齢範囲 L_j と R_j (0 ≤ L_j ≤ R_j ≤ 120) が空白区切りで与えられます。",
            "・入力は N + Q + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各クエリに対して、指定された年齢範囲内の全ての名前をアルファベット順に空白区切りで1行に出力してください。",
            "　",
            "・該当する名前がない場合は \"None\" と出力してください。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 3\nAlice 30\nBob 25\nCharlie 35\nDave 25\nEve 40\n25 30\n20 25\n40 50",
                "output": "Alice Bob Dave\nBob Dave\nEve",
                "isPublic": true
            },
            {
                "input": "2 2\nFrank 50\nGrace 60\n55 65\n70 80",
                "output": "Grace\nNone",
                "isPublic": true
            },
            {
                "input": "3 1\nHeidi 20\nIvan 20\nJudy 20\n15 25",
                "output": "Heidi Ivan Judy",
                "isPublic": true
            }
        ]
    },
    {
        "id": 30,
        "title": "二分探索の実装",
        "description": [
            "あなたは、ソートされた配列に対して二分探索を行うプログラムを書いています。",
            "　",
            "与えられた数値が配列内に存在するかを判定し、そのインデックス（0から始まる）を出力してください。存在しない場合は -1 を出力します。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N Q",
            "A_1 A_2 ... A_N",
            "X_1",
            "...",
            "X_Q",
            "</code>",
            "・1行目に配列の長さ N (1 ≤ N ≤ 10^5) とクエリの数 Q (1 ≤ Q ≤ 10^5) が空白区切りで与えられます。",
            "・2行目にソートされた配列 A の N 個の整数 A_i (−10^9 ≤ A_i ≤ 10^9) が空白区切りで与えられます。",
            "・続く Q 行のうちの i 行目には、検索対象の整数 X_i (−10^9 ≤ X_i ≤ 10^9) が与えられます。",
            "・入力は N + Q + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各クエリに対して、数値が配列内に存在する場合はそのインデックスを、存在しない場合は -1 を1行に出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 3\n1 3 5 7 9\n5\n2\n9",
                "output": "2\n-1\n4",
                "isPublic": true
            },
            {
                "input": "4 2\n10 20 30 40\n15\n40",
                "output": "-1\n3",
                "isPublic": true
            },
            {
                "input": "6 4\n-5 -3 0 1 4 6\n0\n-3\n5\n6",
                "output": "2\n1\n-1\n5",
                "isPublic": true
            }
        ]
    },
    {
        "id": 31,
        "title": "迷彩パターンの生成",
        "description": [
            "あなたは軍事用の迷彩パターンをデザインするプログラムを開発しています。",
            "　",
            "与えられたグリッドサイズ N×M に基づいて、迷彩パターンを生成してください。",
            "迷彩パターンは、特定の規則に従って '#' と '.' を配置することで表現されます。",
            "　",
            "迷彩パターンの生成規則は以下の通りです：",
            "1. 各行の奇数列には '#', 偶数列には '.' を配置します。",
            "2. 各行の偶数行（2, 4, 6, ...）は1行上の行を右に1文字シフトします。",
            "　",
            "生成された迷彩パターンを出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M",
            "</code>",
            "・1行目にグリッドの行数 N (1 ≤ N ≤ 100) と列数 M (1 ≤ M ≤ 100) が空白区切りで与えられます。",
            "・入力は1行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "生成された迷彩パターンをN行M列の形式で出力してください。",
            "・各行は '#' と '.' のみで構成されます。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3 5",
                "output": "#.#.#\n.#.#.\n#.#.#",
                "isPublic": true
            },
            {
                "input": "4 4",
                "output": "#.#.\n.#.#\n#.#.\n.#.#",
                "isPublic": true
            },
            {
                "input": "2 6",
                "output": "#.#.#.\n.#.#.#",
                "isPublic": true
            }
        ]
    },
    {
        "id": 32,
        "title": "簡易暗号解読",
        "description": [
            "あなたは古代の暗号を解読する任務を受けました。",
            "暗号文は、各文字がシフトされたアルファベットで構成されています。",
            "シフト数 K が与えられたとき、各文字をK文字前に戻して元のメッセージを復元してください。",
            "　",
            "ただし、アルファベットの範囲を超えた場合は、アルファベットの末尾から再び始めます（例：'A' の前は 'Z'）。",
            "　",
            "大文字と小文字は区別されます。非アルファベット文字はそのまま出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "K",
            "S",
            "</code>",
            "・1行目にシフト数を表す整数 K (1 ≤ K ≤ 25) が与えられます。",
            "・2行目に暗号文 S が与えられます。S は英大文字、英小文字、数字、記号などで構成される文字列であり、1 ≤ |S| ≤ 1000。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "復号化されたメッセージを1行に出力してください。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\nKhoor Zruog!",
                "output": "Hello World!",
                "isPublic": true
            },
            {
                "input": "1\ndpef",
                "output": "code",
                "isPublic": true
            },
            {
                "input": "5\nMjqqt, Btwqi!",
                "output": "Hello, World!",
                "isPublic": true
            }
        ]
    },
    {
        "id": 33,
        "title": "文字列のパターンカウント",
        "description": [
            "与えられた文字列 S において、指定されたパターン P が何回出現するかをカウントするプログラムを作成してください。",
            "パターン P は文字列 S の中に重複して出現することがあります。",
            "ただし、パターンが重なり合ってカウントされる場合もあります。",
            "　",
            "例えば、S = \"abababa\", P = \"aba\" の場合、\"aba\" は3回出現します（開始位置0, 2, 4）。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "S",
            "P",
            "</code>",
            "・1行目に文字列 S が与えられます。S は英小文字のみで構成され、1 ≤ |S| ≤ 10^5。",
            "・2行目にパターン文字列 P が与えられます。P は英小文字のみで構成され、1 ≤ |P| ≤ |S|。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "パターン P が文字列 S に出現する回数を整数で出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "abababa\naba",
                "output": "3",
                "isPublic": true
            },
            {
                "input": "aaaaa\naaa",
                "output": "3",
                "isPublic": true
            },
            {
                "input": "abcdefg\nhij",
                "output": "0",
                "isPublic": true
            }
        ]
    },
    {
        "id": 34,
        "title": "数独の解答確認",
        "description": [
            "あなたは数独パズルの解答を確認するプログラムを作成しています。",
            "数独は9×9のグリッドで構成されており、各行、各列、そして3×3のブロックに1から9までの数字が重複なく配置されている必要があります。",
            "　",
            "与えられた数独の解答が正しいかどうかを判定してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "S_1",
            "S_2",
            "...",
            "S_9",
            "</code>",
            "・続く9行には、数独の各行の数字がスペース区切りで与えられます。",
            "・各行には9つの整数が含まれ、1から9の範囲です。",
            "・入力は9行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "解答が正しい場合は \"Valid\"、正しくない場合は \"Invalid\" と出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 3 4 6 7 8 9 1 2\n6 7 2 1 9 5 3 4 8\n1 9 8 3 4 2 5 6 7\n8 5 9 7 6 1 4 2 3\n4 2 6 8 5 3 7 9 1\n7 1 3 9 2 4 8 5 6\n9 6 1 5 3 7 2 8 4\n2 8 7 4 1 9 6 3 5\n3 4 5 2 8 6 1 7 9",
                "output": "Valid",
                "isPublic": true
            },
            {
                "input": "5 3 4 6 7 8 9 1 2\n6 7 2 1 9 5 3 4 8\n1 9 8 3 4 2 5 6 7\n8 5 9 7 6 1 4 2 3\n4 2 6 8 5 3 7 9 1\n7 1 3 9 2 4 8 5 6\n9 6 1 5 3 7 2 8 4\n2 8 7 4 1 9 6 3 5\n3 4 5 2 8 6 1 7 8",
                "output": "Invalid",
                "isPublic": true
            },
            {
                "input": "5 3 4 6 7 8 9 1 2\n6 7 2 1 9 5 3 4 8\n1 9 8 3 4 2 5 6 7\n8 5 9 7 6 1 4 2 3\n4 2 6 8 5 3 7 9 1\n7 1 3 9 2 4 8 5 6\n9 6 1 5 3 7 2 8 4\n2 8 7 4 1 9 6 3 5\n3 4 5 2 8 6 1 7 0",
                "output": "Invalid",
                "isPublic": true
            }
        ]
    },
    {
        "id": 35,
        "title": "動物園の飼育計画",
        "description": [
            "あなたは動物園の飼育計画を担当しています。",
            "動物園には複数の動物種があり、それぞれの動物には特定の生息エリアが割り当てられています。",
            "動物ごとに必要なスペースが異なり、動物同士が互いに干渉しないように計画を立てる必要があります。",
            "　",
            "与えられた動物のリストとその必要スペース、既存のエリア情報に基づいて、新たに動物を配置できるかを判定してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M",
            "Animal_1 Space_1",
            "...",
            "Animal_N Space_N",
            "Area_1 Capacity_1",
            "...",
            "Area_M Capacity_M",
            "Q",
            "Query_1_Area Animal",
            "...",
            "Query_Q_Area Animal",
            "</code>",
            "・1行目に動物の種類数 N (1 ≤ N ≤ 1000) とエリア数 M (1 ≤ M ≤ 1000) が空白区切りで与えられます。",
            "・続く N 行には各動物の名前と必要スペースが与えられます。動物の名前はアルファベットのみ、スペースは整数です。",
            "・その後の M 行には各エリアの名前と容量が与えられます。エリアの名前はアルファベットのみ、容量は整数です。",
            "・最後に1行にクエリの数 Q (1 ≤ Q ≤ 1000) が与えられ、続く Q 行に各クエリが与えられます。",
            "・各クエリは、エリア名と動物名が半角スペース区切りで与えられます。",
            "・入力は N + M + Q + 2 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各クエリに対して、指定されたエリアに動物を配置できる場合は \"Yes\"、できない場合は \"No\" と出力してください。",
            "　",
            "・各出力は1行であり、出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3 2\nLion 50\nTiger 60\nBear 40\nSavannah 100\nJungle 80\n4\nSavannah Lion\nSavannah Tiger\nJungle Bear\nJungle Tiger",
                "output": "Yes\nNo\nYes\nNo",
                "isPublic": true
            },
            {
                "input": "2 1\nElephant 70\nGiraffe 60\nSavannah 130\n3\nSavannah Elephant\nSavannah Giraffe\nSavannah Giraffe",
                "output": "Yes\nYes\nNo",
                "isPublic": true
            },
            {
                "input": "1 1\nPanda 30\nBambooForest 25\n1\nBambooForest Panda",
                "output": "No",
                "isPublic": true
            }
        ]
    },
    {
        "id": 36,
        "title": "最短経路の計算",
        "description": [
            "あなたは都市間の道路網を管理しています。各道路には移動にかかる時間が設定されています。",
            "特定の2つの都市間で最短時間で移動するための時間を計算するプログラムを作成してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M",
            "U_1 V_1 T_1",
            "...",
            "U_M V_M T_M",
            "S G",
            "</code>",
            "・1行目に都市の数 N (1 ≤ N ≤ 1000) と道路の数 M (1 ≤ M ≤ 10000) が空白区切りで与えられます。",
            "・続く M 行には各道路の情報が与えられます。U_i と V_i は接続する都市の番号 (1 ≤ U_i, V_i ≤ N)、T_i は移動時間 (1 ≤ T_i ≤ 1000) です。",
            "・最後の行にスタート都市 S とゴール都市 G (1 ≤ S, G ≤ N) が与えられます。",
            "・入力は M + 2 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "スタート都市 S からゴール都市 G までの最短移動時間を整数で出力してください。",
            "・パスが存在しない場合は \"-1\" を出力してください。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 6\n1 2 10\n1 3 3\n2 3 1\n3 4 2\n4 5 4\n3 5 8\n1 5",
                "output": "9",
                "isPublic": true
            },
            {
                "input": "3 1\n1 2 5\n2 3 10\n1 3",
                "output": "-1",
                "isPublic": true
            },
            {
                "input": "4 4\n1 2 2\n2 3 2\n3 4 2\n1 4 10\n1 4",
                "output": "6",
                "isPublic": true
            }
        ]
    },
    {
        "id": 37,
        "title": "カレンダーの日付チェック",
        "description": [
            "あなたはカレンダーアプリを開発しています。入力された日付が有効かどうかを判定するプログラムを作成してください。",
            "日付は西暦年、月、日で構成されています。うるう年の考慮も必要です。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "Y M D",
            "</code>",
            "・1行目に西暦年 Y (1 ≤ Y ≤ 9999)、月 M (1 ≤ M ≤ 12)、日 D (1 ≤ D ≤ 31) が空白区切りで与えられます。",
            "・入力は1行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "日付が有効な場合は \"Yes\"、無効な場合は \"No\" と出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "2020 2 29",
                "output": "Yes",
                "isPublic": true
            },
            {
                "input": "2019 2 29",
                "output": "No",
                "isPublic": true
            },
            {
                "input": "2000 4 31",
                "output": "No",
                "isPublic": true
            }
        ]
    },
    {
        "id": 38,
        "title": "買い物リストの最適化",
        "description": [
            "あなたは買い物リストを最適化するプログラムを作成しています。",
            "与えられた予算内で、できるだけ多くの商品を購入するための購入可能な商品の組み合わせを見つけてください。",
            "　",
            "予算内で購入できる商品のうち、価格の合計が予算にできるだけ近い組み合わせを選びます。複数の組み合わせがある場合は、商品の数が最も多いものを選びます。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N B",
            "C_1 C_2 ... C_N",
            "</code>",
            "・1行目に商品の数 N (1 ≤ N ≤ 20) と予算 B (1 ≤ B ≤ 10^5) が空白区切りで与えられます。",
            "・2行目に各商品の価格 C_i (1 ≤ C_i ≤ 10^4) がスペース区切りで与えられます。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "購入可能な商品の価格の合計の最大値を出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 100\n20 30 50 70 90",
                "output": "100",
                "isPublic": true
            },
            {
                "input": "3 50\n60 70 80",
                "output": "0",
                "isPublic": true
            },
            {
                "input": "4 150\n50 50 50 50",
                "output": "150",
                "isPublic": true
            }
        ]
    },
    {
        "id": 39,
        "title": "文字列のアナグラム判定",
        "description": [
            "2つの文字列がアナグラム（文字の並び替え）であるかを判定するプログラムを作成してください。",
            "アナグラムとは、同じ文字を同じ回数使用しているが、順序が異なる文字列のことを指します。",
            "　",
            "大文字と小文字は区別されます。スペースや記号も文字として扱います。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "S1",
            "S2",
            "</code>",
            "・1行目に1つ目の文字列 S1 が与えられます。",
            "・2行目に2つ目の文字列 S2 が与えられます。",
            "・S1 と S2 は任意のASCII文字で構成され、1 ≤ |S1|, |S2| ≤ 1000。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "2つの文字列がアナグラムである場合は \"Yes\"、そうでない場合は \"No\" を出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "listen",
                "output": "silent",
                "isPublic": true
            },
            {
                "input": "Hello",
                "output": "Olelh",
                "isPublic": true
            },
            {
                "input": "Test",
                "output": "Taste",
                "isPublic": true
            }
        ]
    },
    {
        "id": 40,
        "title": "バーコードの検証",
        "description": [
            "商品にはバーコードが割り当てられています。バーコードの最後の数字はチェックディジットと呼ばれ、前の数字から計算されます。",
            "チェックディジットの計算方法は次の通りです：",
            "1. 偶数位置の数字を合計します。",
            "2. 奇数位置の数字を合計し、その合計を3倍します。",
            "3. ステップ1とステップ2の合計を求めます。",
            "4. その合計を10で割った余りがチェックディジットです。",
            "　",
            "与えられたバーコードが正しいかどうかを判定してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "B",
            "</code>",
            "・1行目にバーコード B が与えられます。",
            "・B は数字のみで構成され、長さは10桁です。",
            "・入力は1行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "バーコードが正しい場合は \"Valid\"、正しくない場合は \"Invalid\" と出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "036000291452",
                "output": "Valid",
                "isPublic": true
            },
            {
                "input": "123456789012",
                "output": "Invalid",
                "isPublic": true
            },
            {
                "input": "042100005264",
                "output": "Valid",
                "isPublic": true
            }
        ]
    },
    {
        "id": 41,
        "title": "お菓子の袋分け",
        "description": [
            "あなたはお菓子を均等に袋に分けるプログラムを作成しています。",
            "与えられたお菓子の総数 N と袋の数 M に基づいて、各袋に入るお菓子の数を計算してください。",
            "お菓子は均等に分けられ、余りは最初のいくつかの袋に1つずつ配分されます。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M",
            "</code>",
            "・1行目にお菓子の総数 N (1 ≤ N ≤ 10^9) と袋の数 M (1 ≤ M ≤ 10^6) が空白区切りで与えられます。",
            "・入力は1行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各袋に入るお菓子の数をスペース区切りで1行に出力してください。",
            "・余りがある場合は、最初の余り分の袋に1つずつ追加します。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "10 3",
                "output": "4 3 3",
                "isPublic": true
            },
            {
                "input": "7 5",
                "output": "2 2 1 1 1",
                "isPublic": true
            },
            {
                "input": "100 10",
                "output": "10 10 10 10 10 10 10 10 10 10",
                "isPublic": true
            }
        ]
    },
    {
        "id": 42,
        "title": "時刻表の検索",
        "description": [
            "あなたは鉄道会社の時刻表検索プログラムを作成しています。",
            "与えられた出発駅と到着駅、および出発時間に基づいて、最適な列車を検索してください。",
            "最適な列車は、出発時間が指定時刻以降で最も早いものです。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N",
            "Train_1_Departure Station Arrival Station Departure Time",
            "...",
            "Train_N_Departure Station Arrival Station Departure Time",
            "Q",
            "Query_1_Departure Station Arrival Station Desired Time",
            "...",
            "Query_Q_Departure Station Arrival Station Desired Time",
            "</code>",
            "・1行目に列車の数 N (1 ≤ N ≤ 10^5) が与えられます。",
            "・続く N 行には各列車の情報が与えられます。各行は出発駅、到着駅、出発時刻（HH:MM形式）で構成されます。",
            "・その後に1行にクエリの数 Q (1 ≤ Q ≤ 10^5) が与えられ、続く Q 行に各クエリが与えられます。各クエリは出発駅、到着駅、希望出発時刻（HH:MM形式）で構成されます。",
            "・入力は N + Q + 2 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各クエリに対して、最適な列車の出発時刻を \"HH:MM\" の形式で出力してください。",
            "該当する列車がない場合は \"No available train\" と出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5\nTokyo Osaka 09:00\nTokyo Nagoya 09:30\nNagoya Osaka 10:00\nTokyo Osaka 09:15\nTokyo Osaka 10:00\n3\nTokyo Osaka 09:05\nTokyo Nagoya 09:00\nOsaka Tokyo 10:00",
                "output": "09:15\n09:30\nNo available train",
                "isPublic": true
            },
            {
                "input": "2\nKyoto Hiroshima 08:00\nKyoto Hiroshima 08:30\n2\nKyoto Hiroshima 07:00\nKyoto Hiroshima 08:30",
                "output": "08:00\n08:30",
                "isPublic": true
            },
            {
                "input": "3\nSapporo Tokyo 06:00\nSapporo Tokyo 07:00\nSapporo Tokyo 08:00\n2\nSapporo Tokyo 07:30\nSapporo Tokyo 08:00",
                "output": "08:00\n08:00",
                "isPublic": true
            }
        ]
    },
    {
        "id": 43,
        "title": "通貨両替の最適化",
        "description": [
            "あなたは旅行中に通貨を両替するプログラムを作成しています。",
            "与えられた予算内で、できるだけ多くの異なる通貨を両替するための最適な両替戦略を見つけてください。",
            "各通貨には両替レートが異なり、1つの通貨につき1回だけ両替できます。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N B",
            "C_1 R_1",
            "...",
            "C_N R_N",
            "</code>",
            "・1行目に通貨の種類数 N (1 ≤ N ≤ 1000) と予算 B (1 ≤ B ≤ 10^6) が空白区切りで与えられます。",
            "・続く N 行には各通貨の名前 C_i と両替レート R_i (1 ≤ R_i ≤ 1000) がスペース区切りで与えられます。",
            "・入力は N + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "予算内で両替できる通貨の最大数を整数で出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 100\nUSD 30\nEUR 20\nJPY 10\nGBP 50\nAUD 40",
                "output": "3",
                "isPublic": true
            },
            {
                "input": "3 50\nCHF 60\nCAD 70\nNZD 80",
                "output": "0",
                "isPublic": true
            },
            {
                "input": "4 100\nINR 25\nCNY 30\nKRW 20\nMXN 10",
                "output": "4",
                "isPublic": true
            }
        ]
    },
    {
        "id": 44,
        "title": "社員の勤務スケジュール",
        "description": [
            "あなたは会社の勤務スケジュールを管理するプログラムを作成しています。",
            "各社員の出勤日と休暇日が与えられるので、特定の日に出勤している社員の数をカウントしてください。",
            "　",
            "社員は複数の休暇日を持つことができますが、同じ日に出勤と休暇が重なることはありません。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N Q",
            "Employee_1 K_1 D_1 D_2 ... D_K1",
            "...",
            "Employee_N K_N D_1 D_2 ... D_KN",
            "Query_1 D",
            "...",
            "Query_Q D",
            "</code>",
            "・1行目に社員の数 N (1 ≤ N ≤ 1000) とクエリの数 Q (1 ≤ Q ≤ 1000) が空白区切りで与えられます。",
            "・続く N 行には各社員の情報が与えられます。各行は社員名、休暇日数 K_i (0 ≤ K_i ≤ 30)、休暇日 D_j (1 ≤ D_j ≤ 365) がスペース区切りで与えられます。",
            "・その後の Q 行には各クエリの日付 D が与えられます。D は1から365の整数です。",
            "・入力は N + Q + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各クエリに対して、指定された日 D に出勤している社員の数を整数で出力してください。",
            "　",
            "・出勤している社員の数は N からその日に休暇を取っている社員の数を引いたものです。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3 3\nAlice 2 100 200\nBob 1 150\nCharlie 0\n100\n150\n250",
                "output": "2\n1\n3",
                "isPublic": true
            },
            {
                "input": "2 2\nDave 1 50\nEve 2 50 100\n50\n100",
                "output": "1\n0",
                "isPublic": true
            },
            {
                "input": "4 4\nFrank 0\nGrace 1 300\nHeidi 2 100 200\nIvan 1 150\n100\n150\n200\n300",
                "output": "3\n2\n2\n1",
                "isPublic": true
            }
        ]
    },
    {
        "id": 45,
        "title": "単語の出現頻度分析",
        "description": [
            "あなたはテキストデータから単語の出現頻度を分析するプログラムを作成しています。",
            "与えられたテキスト内で各単語が何回出現するかをカウントし、出現頻度が高い順に並べてください。",
            "単語は大文字と小文字を区別しません。記号は無視してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "Text_1",
            "...",
            "Text_T",
            "</code>",
            "・1行目にテキストの行数 T (1 ≤ T ≤ 1000) が与えられます。",
            "・続く T 行には各行のテキストが与えられます。各行は英字と記号で構成され、1 ≤ |Text_i| ≤ 1000。",
            "・入力は T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "単語とその出現頻度を出現頻度が高い順に出力してください。",
            "・同じ出現頻度の場合は、アルファベット順に並べてください。",
            "・各行は \"Word Frequency\" の形式で出力します。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\nHello world! This is a test.\nHello again, world.\nTest the world.",
                "output": "world 3\nhello 2\ntest 2\na 1\nagain 1\nis 1\nthe 1\nthis 1",
                "isPublic": true
            },
            {
                "input": "2\nApple apple apple.\nBanana banana.",
                "output": "apple 3\nbanana 2",
                "isPublic": true
            },
            {
                "input": "1\nNo words here!",
                "output": "here 1\nno 1\nwords 1",
                "isPublic": true
            }
        ]
    },
    {
        "id": 46,
        "title": "高速道路の料金計算",
        "description": [
            "あなたは高速道路の料金計算システムを開発しています。",
            "高速道路の料金は走行距離に基づいて計算されます。",
            "基本料金は距離に応じて段階的に設定されており、特定の時間帯には割引が適用されます。",
            "　",
            "与えられた走行距離と時間帯に基づいて、最終的な料金を計算してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "D T",
            "</code>",
            "・1行目に走行距離 D (1 ≤ D ≤ 1000) と時間帯 T (1 ≤ T ≤ 24) が半角スペース区切りで与えられます。",
            "・入力は1行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "最終的な料金を整数で出力してください。",
            "　",
            "・料金は基本料金に時間帯割引を適用した値です。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "150 10",
                "output": "2250",
                "isPublic": true
            },
            {
                "input": "50 20",
                "output": "1000",
                "isPublic": true
            },
            {
                "input": "300 5",
                "output": "6000",
                "isPublic": true
            }
        ]
    },
    {
        "id": 47,
        "title": "カスタムキーボードのレイアウト",
        "description": [
            "あなたはカスタムキーボードのレイアウトを設計しています。",
            "キーボードは N 行 M 列のグリッドで構成されており、各セルには特定のキーが配置されます。",
            "特定のキーの配置には制約があり、隣接するセルに同じ種類のキーを配置することはできません。",
            "　",
            "与えられたキーの種類と数に基づいて、制約を満たすキーボードのレイアウトが可能かどうかを判定してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N M K",
            "C_1 V_1",
            "...",
            "C_K V_K",
            "</code>",
            "・1行目にキーボードの行数 N (1 ≤ N ≤ 10)、列数 M (1 ≤ M ≤ 10)、キーの種類数 K (1 ≤ K ≤ 10) が空白区切りで与えられます。",
            "・続く K 行には各キーの種類 C_i (文字) と必要なキーの数 V_i (1 ≤ V_i ≤ N×M) が半角スペース区切りで与えられます。",
            "・入力は K + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "レイアウトが可能な場合は \"Yes\"、不可能な場合は \"No\" と出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "2 2 2\nA 2\nB 2",
                "output": "Yes",
                "isPublic": true
            },
            {
                "input": "3 3 2\nX 5\nY 4",
                "output": "No",
                "isPublic": true
            },
            {
                "input": "4 4 3\nA 5\nB 6\nC 5",
                "output": "Yes",
                "isPublic": true
            }
        ]
    },
    {
        "id": 48,
        "title": "パスワードの強度判定",
        "description": [
            "あなたはセキュリティシステムの一環として、パスワードの強度を判定するプログラムを作成しています。",
            "パスワードの強度は以下の基準で評価されます：",
            "1. 長さが8文字以上である。",
            "2. 少なくとも1つの大文字が含まれている。",
            "3. 少なくとも1つの小文字が含まれている。",
            "4. 少なくとも1つの数字が含まれている。",
            "5. 少なくとも1つの特殊文字（!@#$%^&*()-+）が含まれている。",
            "　",
            "与えられたパスワードがこれらの基準を満たしているかを判定してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "P_1",
            "...",
            "P_T",
            "</code>",
            "・1行目にテストケースの数 T (1 ≤ T ≤ 100) が与えられます。",
            "・続く T 行のうちの i 行目には、i 番目のパスワード P_i (1 ≤ |P_i| ≤ 100) が与えられます。",
            "・入力は T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各パスワードに対して、強度が基準を満たしていれば \"Strong\"、満たしていなければ \"Weak\" と出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\nAa1!aa1!\npassword\nPassw0rd!",
                "output": "Strong\nWeak\nStrong",
                "isPublic": true
            },
            {
                "input": "2\n12345678\nAbcdefgh",
                "output": "Weak\nWeak",
                "isPublic": true
            },
            {
                "input": "1\nA1!a2@B3#",
                "output": "Strong",
                "isPublic": true
            }
        ]
    },
    {
        "id": 49,
        "title": "ペットの餌やりスケジュール",
        "description": [
            "あなたはペットの餌やりスケジュールを管理するプログラムを作成しています。",
            "ペットは毎日決まった時間に餌をもらいますが、特定の日には追加で餌をもらうことがあります。",
            "　",
            "与えられたスケジュールに基づいて、特定の日の餌やり回数を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "D Q",
            "S_1 S_2 ... S_D",
            "Query_1",
            "...",
            "Query_Q",
            "</code>",
            "・1行目に日数 D (1 ≤ D ≤ 365) とクエリの数 Q (1 ≤ Q ≤ 1000) が半角スペース区切りで与えられます。",
            "・2行目に各日の日付 S_i (1 ≤ S_i ≤ D) に餌をやる回数が与えられます。",
            "・続く Q 行のうちの j 行目には、クエリの日付 S_j (1 ≤ S_j ≤ D) が与えられます。",
            "・入力は Q + 2 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各クエリに対して、指定された日 S_j の餌やり回数を整数で出力してください。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 3\n2 3 1 4 2\n1\n3\n5",
                "output": "2\n1\n2",
                "isPublic": true
            },
            {
                "input": "7 4\n1 1 2 2 3 3 4\n2\n4\n6\n7",
                "output": "1\n2\n3\n4",
                "isPublic": true
            },
            {
                "input": "3 2\n5 0 3\n1\n2",
                "output": "5\n0",
                "isPublic": true
            }
        ]
    },
    {
        "id": 50,
        "title": "文字列の最長回文部分列",
        "description": [
            "与えられた文字列の中で、最長の回文部分列の長さを求めるプログラムを作成してください。",
            "回文部分列とは、文字列の中から文字を抜き出して得られる回文のことです。文字の順序は保持されますが、連続している必要はありません。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "S_1",
            "...",
            "S_T",
            "</code>",
            "・1行目にテストケースの数 T (1 ≤ T ≤ 100) が与えられます。",
            "・続く T 行のうちの i 行目には、文字列 S_i (1 ≤ |S_i| ≤ 1000) が与えられます。",
            "・S_i は英大文字および英小文字のみで構成されます。",
            "・入力は T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各テストケースに対して、最長回文部分列の長さを整数で出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\nagbdba\nabacdfgdcaba\nabcd",
                "output": "5\n7\n1",
                "isPublic": true
            },
            {
                "input": "2\nracecar\nnoon",
                "output": "7\n4",
                "isPublic": true
            },
            {
                "input": "1\na",
                "output": "1",
                "isPublic": true
            }
        ]
    },
    {
        "id": 51,
        "title": "電車の遅延分析",
        "description": [
            "あなたは鉄道会社のデータ分析チームに所属しており、電車の遅延データを分析するプログラムを作成しています。",
            "各電車の出発時刻と実際の出発時刻が与えられるので、平均遅延時間を計算してください。",
            "　",
            "ただし、遅延時間がマイナスの場合（予定より早く出発した場合）は0とみなします。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N",
            "Scheduled_1 Actual_1",
            "...",
            "Scheduled_N Actual_N",
            "</code>",
            "・1行目に電車の数 N (1 ≤ N ≤ 10^5) が与えられます。",
            "・続く N 行のうちの i 行目には、i 番目の電車の予定出発時刻 Scheduled_i と実際の出発時刻 Actual_i が「HH:MM」形式で与えられます。",
            "・入力は N + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "平均遅延時間を分単位で小数点以下第一位まで出力してください。",
            "　",
            "・遅延時間の平均が 0 の場合は \"0.0\" と出力してください。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n09:00 09:15\n10:30 10:25\n11:45 12:00",
                "output": "10.0",
                "isPublic": true
            },
            {
                "input": "2\n08:00 07:50\n09:30 09:35",
                "output": "2.5",
                "isPublic": true
            },
            {
                "input": "1\n12:00 11:50",
                "output": "0.0",
                "isPublic": true
            }
        ]
    },
    {
        "id": 52,
        "title": "スケジュールの重複検出",
        "description": [
            "あなたは会議室の予約システムを管理しています。",
            "複数の予約が重複していないかを確認するプログラムを作成してください。",
            "　",
            "各予約には開始時刻と終了時刻があり、重複がない場合はすべての予約をそのまま承認します。",
            "重複がある場合は、最も早く終了する予約を優先し、それ以外を拒否します。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N",
            "S_1 E_1",
            "...",
            "S_N E_N",
            "</code>",
            "・1行目に予約の数 N (1 ≤ N ≤ 10^5) が与えられます。",
            "・続く N 行のうちの i 行目には、i 番目の予約の開始時刻 S_i と終了時刻 E_i (0 ≤ S_i < E_i ≤ 24) が「HH:MM」形式で与えられます。",
            "・入力は N + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "承認された予約の数を整数で出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n09:00 10:00\n09:30 11:00\n10:00 12:00",
                "output": "2",
                "isPublic": true
            },
            {
                "input": "4\n08:00 09:00\n09:00 10:00\n10:00 11:00\n09:30 10:30",
                "output": "3",
                "isPublic": true
            },
            {
                "input": "2\n14:00 15:00\n14:30 16:00",
                "output": "1",
                "isPublic": true
            }
        ]
    },
    {
        "id": 53,
        "title": "デジタル時計の加算",
        "description": [
            "デジタル時計は24時間形式で時刻を表示します。あなたは与えられた時刻に指定された分数を加算するプログラムを作成しています。",
            "加算後の正しい時刻を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "HH:MM D",
            "...",
            "HH:MM D",
            "</code>",
            "・1行目にテストケースの数 T (1 ≤ T ≤ 100) が与えられます。",
            "・続く T 行のうちの i 行目には、時刻 \"HH:MM\" と加算する分数 D (0 ≤ D ≤ 1000) が半角スペース区切りで与えられます。",
            "・入力は T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "加算後の時刻を \"HH:MM\" の形式で出力してください。",
            "　",
            "・時刻は24時間形式で表示し、00:00 から 23:59 の範囲内に収めてください。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n23:30 45\n00:15 30\n12:00 720",
                "output": "00:15\n00:45\n12:00",
                "isPublic": true
            },
            {
                "input": "2\n11:59 1\n22:00 120",
                "output": "12:00\n00:00",
                "isPublic": true
            },
            {
                "input": "1\n00:00 1440",
                "output": "00:00",
                "isPublic": true
            }
        ]
    },
    {
        "id": 54,
        "title": "宝石の色分類",
        "description": [
            "あなたは宝石商のために、宝石を色ごとに分類するプログラムを作成しています。",
            "各宝石には色が割り当てられており、指定された色の宝石の数をカウントします。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N Q",
            "Color_1 Color_2 ... Color_N",
            "Query_1",
            "...",
            "Query_Q",
            "</code>",
            "・1行目に宝石の数 N (1 ≤ N ≤ 10^5) とクエリの数 Q (1 ≤ Q ≤ 10^5) が半角スペース区切りで与えられます。",
            "・2行目にN個の宝石の色 Color_i (1 ≤ |Color_i| ≤ 10, 英小文字のみ) がスペース区切りで与えられます。",
            "・続く Q 行のうちの j 行目には、クエリ色 Query_j (1 ≤ |Query_j| ≤ 10, 英小文字のみ) が与えられます。",
            "・入力は Q + 2 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各クエリに対して、指定された色の宝石の数を整数で出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "6 3\nred blue green blue red yellow\nblue\nred\npurple",
                "output": "2\n2\n0",
                "isPublic": true
            },
            {
                "input": "4 2\ndiamond ruby sapphire emerald\nsapphire\nemerald",
                "output": "1\n1",
                "isPublic": true
            },
            {
                "input": "5 4\nopal topaz garnet amethyst aquamarine\nopal\ntopaz\npearl\namethyst",
                "output": "1\n1\n0\n1",
                "isPublic": true
            }
        ]
    },
    {
        "id": 55,
        "title": "音楽プレイリストの管理",
        "description": [
            "あなたは音楽プレイリストを管理するプログラムを作成しています。",
            "プレイリストには複数の曲があり、各曲には再生時間が設定されています。",
            "指定された再生時間の範囲内で再生可能な曲をリストアップしてください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N Q",
            "Title_1 Duration_1",
            "...",
            "Title_N Duration_N",
            "L_1 R_1",
            "...",
            "L_Q R_Q",
            "</code>",
            "・1行目に曲数 N (1 ≤ N ≤ 10^5) とクエリの数 Q (1 ≤ Q ≤ 10^5) が半角スペース区切りで与えられます。",
            "・続く N 行のうちの i 行目には、i 番目の曲のタイトル Title_i (1 ≤ |Title_i| ≤ 100, 英数字とスペース) と再生時間 Duration_i (1 ≤ Duration_i ≤ 1000) が半角スペース区切りで与えられます。",
            "・続く Q 行のうちの j 行目には、再生時間の範囲 L_j R_j (1 ≤ L_j ≤ R_j ≤ 1000) が半角スペース区切りで与えられます。",
            "・入力は N + Q + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各クエリに対して、再生時間が範囲内の曲のタイトルをアルファベット順に空白区切りで出力してください。",
            "該当する曲がない場合は \"None\" と出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 2\nSongA 200\nSongB 150\nSongC 300\nSongD 180\nSongE 220\n150 200\n250 350",
                "output": "SongA SongB SongD\nSongC SongE",
                "isPublic": true
            },
            {
                "input": "3 1\nTrack1 100\nTrack2 200\nTrack3 300\n400 500",
                "output": "None",
                "isPublic": true
            },
            {
                "input": "4 3\nAlpha 250\nBeta 150\nGamma 250\nDelta 100\n100 200\n250 250\n50 100",
                "output": "Beta Delta\nAlpha Gamma\nDelta",
                "isPublic": true
            }
        ]
    },
    {
        "id": 56,
        "title": "天気予報の解析",
        "description": [
            "あなたは天気予報のデータを解析するプログラムを作成しています。",
            "各日の気温が与えられるので、最高気温と最低気温を求めてください。",
            "さらに、平均気温を計算し、その日の気温が平均を上回っているかどうかを判定します。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N",
            "T_1",
            "...",
            "T_N",
            "</code>",
            "・1行目に日数 N (1 ≤ N ≤ 10^5) が与えられます。",
            "・続く N 行のうちの i 行目には、i 日目の気温 T_i (−50 ≤ T_i ≤ 50) が整数で与えられます。",
            "・入力は N + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "以下の形式で解析結果を出力してください。",
            "<code>",
            "最高気温: H",
            "最低気温: L",
            "平均気温: A",
            "日数を超えた日: C",
            "</code>",
            "・1行目に最高気温 H を出力してください。",
            "・2行目に最低気温 L を出力してください。",
            "・3行目に平均気温 A を小数点以下第一位まで出力してください。",
            "・4行目に平均気温を超えた日の数 C を出力してください。",
            "　",
            "・各行の末尾に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5\n20\n22\n19\n25\n18",
                "output": "25\n18\n20.8\n2",
                "isPublic": true
            },
            {
                "input": "3\n-5\n0\n5",
                "output": "5\n-5\n0.0\n1",
                "isPublic": true
            },
            {
                "input": "4\n30\n25\n35\n20",
                "output": "35\n20\n27.5\n2",
                "isPublic": true
            }
        ]
    },
    {
        "id": 57,
        "title": "整数の区間和",
        "description": [
            "あなたは整数のリストに対して、指定された区間の和を計算するプログラムを作成しています。",
            "区間はリストの開始インデックスと終了インデックスで指定されます。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N Q",
            "A_1 A_2 ... A_N",
            "L_1 R_1",
            "...",
            "L_Q R_Q",
            "</code>",
            "・1行目にリストの長さ N (1 ≤ N ≤ 10^5) とクエリの数 Q (1 ≤ Q ≤ 10^5) が半角スペース区切りで与えられます。",
            "・2行目にリストのN個の整数 A_i (−10^9 ≤ A_i ≤ 10^9) が空白区切りで与えられます。",
            "・続く Q 行のうちの j 行目には、クエリの開始インデックス L_j と終了インデックス R_j (1 ≤ L_j ≤ R_j ≤ N) が半角スペース区切りで与えられます。",
            "・入力は Q + 2 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各クエリに対して、指定された区間の和を整数で出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5 3\n1 2 3 4 5\n1 3\n2 4\n1 5",
                "output": "6\n9\n15",
                "isPublic": true
            },
            {
                "input": "4 2\n-1 3 -2 4\n1 2\n3 4",
                "output": "2\n2",
                "isPublic": true
            },
            {
                "input": "6 4\n10 20 30 40 50 60\n1 6\n2 5\n3 3\n4 6",
                "output": "210\n140\n30\n150",
                "isPublic": true
            }
        ]
    },
    {
        "id": 58,
        "title": "二進数の桁和",
        "description": [
            "あなたは整数を二進数に変換し、その各桁の和を計算するプログラムを作成しています。",
            "二進数表記における '1' の数を出力してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "X_1",
            "...",
            "X_T",
            "</code>",
            "・1行目にテストケースの数 T (1 ≤ T ≤ 100) が与えられます。",
            "・続く T 行のうちの i 行目には、整数 X_i (0 ≤ X_i ≤ 10^9) が与えられます。",
            "・入力は T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各テストケースに対して、二進数表記における '1' の数を整数で出力してください。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n5\n7\n0",
                "output": "2\n3\n0",
                "isPublic": true
            },
            {
                "input": "2\n15\n8",
                "output": "4\n1",
                "isPublic": true
            },
            {
                "input": "1\n1023",
                "output": "10",
                "isPublic": true
            }
        ]
    },
    {
        "id": 59,
        "title": "タクシー料金の計算",
        "description": [
            "あなたはタクシー会社の料金計算プログラムを作成しています。",
            "タクシーの料金は基本料金と距離に基づく加算料金で計算されます。",
            "さらに、特定の時間帯には割引が適用されます。",
            "　",
            "与えられた乗車距離と時間帯に基づいて、最終的な料金を計算してください。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "T",
            "D_1 H_1",
            "...",
            "D_T H_T",
            "</code>",
            "・1行目にテストケースの数 T (1 ≤ T ≤ 100) が与えられます。",
            "・続く T 行のうちの i 行目には、乗車距離 D_i (1 ≤ D_i ≤ 100) と時間帯 H_i (0 ≤ H_i ≤ 23) が半角スペース区切りで与えられます。",
            "・入力は T + 1 行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各テストケースに対して、最終的な料金を整数で出力してください。",
            "　",
            "・料金は基本料金1000円に、1kmごとに500円が加算されます。",
            "・時間帯が18時から21時（18 ≤ H_i ≤ 21）の場合、総料金から20%の割引が適用されます。",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "3\n10 19\n5 14\n20 20",
                "output": "6000\n3500\n16000",
                "isPublic": true
            },
            {
                "input": "2\n3 18\n7 22",
                "output": "3400\n4500",
                "isPublic": true
            },
            {
                "input": "1\n15 21",
                "output": "12000",
                "isPublic": true
            }
        ]
    },
    {
        "id": 60,
        "title": "商品の在庫最適化",
        "description": [
            "あなたはオンラインショップの在庫管理システムを開発しています。",
            "各商品の売れ行きデータが与えられるので、適切な在庫数を計算してください。",
            "在庫数は過去の売れ行きデータを基に、次月の需要を予測します。",
            "　",
            "売れ行きが多い商品は在庫数を増やし、売れ行きが少ない商品は在庫数を減らします。"
        ],
        "inputDescription": [
            "入力は以下のフォーマットで与えられます。",
            "<code>",
            "N",
            "S_1 S_2 ... S_N",
            "</code>",
            "・1行目に商品の数 N (1 ≤ N ≤ 10^5) が与えられます。",
            "・2行目にN個の売れ行きデータ S_i (0 ≤ S_i ≤ 1000) がスペース区切りで与えられます。",
            "・入力は2行で、入力値最終行の末尾に改行が1つ入ります。"
        ],
        "outputDescription": [
            "各商品の次月の在庫数をスペース区切りで1行に出力してください。",
            "在庫数は売れ行き S_i に基づき、次のルールで計算します：",
            "・S_i ≥ 500 の場合、在庫数を S_i × 1.2 に切り上げます。",
            "・300 ≤ S_i < 500 の場合、在庫数を S_i × 1.0 とします。",
            "・S_i < 300 の場合、在庫数を S_i × 0.8 に切り捨てます。",
            "　",
            "・出力の最後に改行を入れ、余計な文字、空行を含んではいけません。"
        ],
        "timeLimitSec": 1800,
        "testCases": [
            {
                "input": "5\n600 450 200 800 100",
                "output": "720 450 160 960 80",
                "isPublic": true
            },
            {
                "input": "3\n500 299 300",
                "output": "600 239 300",
                "isPublic": true
            },
            {
                "input": "4\n1000 0 499 501",
                "output": "1200 0 399 601",
                "isPublic": true
            }
        ]
    }
]